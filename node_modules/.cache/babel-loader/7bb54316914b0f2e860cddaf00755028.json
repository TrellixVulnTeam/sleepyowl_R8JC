{"ast":null,"code":"'use strict';\n\nmodule.exports = kotlin;\nkotlin.displayName = 'kotlin';\nkotlin.aliases = ['kt', 'kts'];\n\nfunction kotlin(Prism) {\n  ;\n\n  (function (Prism) {\n    Prism.languages.kotlin = Prism.languages.extend('clike', {\n      keyword: {\n        // The lookbehind prevents wrong highlighting of e.g. kotlin.properties.get\n        pattern: /(^|[^.])\\b(?:abstract|actual|annotation|as|break|by|catch|class|companion|const|constructor|continue|crossinline|data|do|dynamic|else|enum|expect|external|final|finally|for|fun|get|if|import|in|infix|init|inline|inner|interface|internal|is|lateinit|noinline|null|object|open|operator|out|override|package|private|protected|public|reified|return|sealed|set|super|suspend|tailrec|this|throw|to|try|typealias|val|var|vararg|when|where|while)\\b/,\n        lookbehind: true\n      },\n      function: [{\n        pattern: /(?:`[^\\r\\n`]+`|\\b\\w+)(?=\\s*\\()/,\n        greedy: true\n      }, {\n        pattern: /(\\.)(?:`[^\\r\\n`]+`|\\w+)(?=\\s*\\{)/,\n        lookbehind: true,\n        greedy: true\n      }],\n      number: /\\b(?:0[xX][\\da-fA-F]+(?:_[\\da-fA-F]+)*|0[bB][01]+(?:_[01]+)*|\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?(?:[eE][+-]?\\d+(?:_\\d+)*)?[fFL]?)\\b/,\n      operator: /\\+[+=]?|-[-=>]?|==?=?|!(?:!|==?)?|[\\/*%<>]=?|[?:]:?|\\.\\.|&&|\\|\\||\\b(?:and|inv|or|shl|shr|ushr|xor)\\b/\n    });\n    delete Prism.languages.kotlin['class-name'];\n    Prism.languages.insertBefore('kotlin', 'string', {\n      'raw-string': {\n        pattern: /(\"\"\"|''')[\\s\\S]*?\\1/,\n        alias: 'string' // See interpolation below\n\n      }\n    });\n    Prism.languages.insertBefore('kotlin', 'keyword', {\n      annotation: {\n        pattern: /\\B@(?:\\w+:)?(?:[A-Z]\\w*|\\[[^\\]]+\\])/,\n        alias: 'builtin'\n      }\n    });\n    Prism.languages.insertBefore('kotlin', 'function', {\n      label: {\n        pattern: /\\b\\w+@|@\\w+\\b/,\n        alias: 'symbol'\n      }\n    });\n    var interpolation = [{\n      pattern: /\\$\\{[^}]+\\}/,\n      inside: {\n        delimiter: {\n          pattern: /^\\$\\{|\\}$/,\n          alias: 'variable'\n        },\n        rest: Prism.languages.kotlin\n      }\n    }, {\n      pattern: /\\$\\w+/,\n      alias: 'variable'\n    }];\n    Prism.languages.kotlin['string'].inside = Prism.languages.kotlin['raw-string'].inside = {\n      interpolation: interpolation\n    };\n    Prism.languages.kt = Prism.languages.kotlin;\n    Prism.languages.kts = Prism.languages.kotlin;\n  })(Prism);\n}","map":{"version":3,"sources":["D:/Rnd/sleepyowl/node_modules/refractor/lang/kotlin.js"],"names":["module","exports","kotlin","displayName","aliases","Prism","languages","extend","keyword","pattern","lookbehind","function","greedy","number","operator","insertBefore","alias","annotation","label","interpolation","inside","delimiter","rest","kt","kts"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,MAAjB;AACAA,MAAM,CAACC,WAAP,GAAqB,QAArB;AACAD,MAAM,CAACE,OAAP,GAAiB,CAAC,IAAD,EAAO,KAAP,CAAjB;;AACA,SAASF,MAAT,CAAgBG,KAAhB,EAAuB;AACrB;;AAAC,GAAC,UAAUA,KAAV,EAAiB;AACjBA,IAAAA,KAAK,CAACC,SAAN,CAAgBJ,MAAhB,GAAyBG,KAAK,CAACC,SAAN,CAAgBC,MAAhB,CAAuB,OAAvB,EAAgC;AACvDC,MAAAA,OAAO,EAAE;AACP;AACAC,QAAAA,OAAO,EACL,0bAHK;AAIPC,QAAAA,UAAU,EAAE;AAJL,OAD8C;AAOvDC,MAAAA,QAAQ,EAAE,CACR;AACEF,QAAAA,OAAO,EAAE,gCADX;AAEEG,QAAAA,MAAM,EAAE;AAFV,OADQ,EAKR;AACEH,QAAAA,OAAO,EAAE,kCADX;AAEEC,QAAAA,UAAU,EAAE,IAFd;AAGEE,QAAAA,MAAM,EAAE;AAHV,OALQ,CAP6C;AAkBvDC,MAAAA,MAAM,EACJ,iIAnBqD;AAoBvDC,MAAAA,QAAQ,EACN;AArBqD,KAAhC,CAAzB;AAuBA,WAAOT,KAAK,CAACC,SAAN,CAAgBJ,MAAhB,CAAuB,YAAvB,CAAP;AACAG,IAAAA,KAAK,CAACC,SAAN,CAAgBS,YAAhB,CAA6B,QAA7B,EAAuC,QAAvC,EAAiD;AAC/C,oBAAc;AACZN,QAAAA,OAAO,EAAE,qBADG;AAEZO,QAAAA,KAAK,EAAE,QAFK,CAEI;;AAFJ;AADiC,KAAjD;AAMAX,IAAAA,KAAK,CAACC,SAAN,CAAgBS,YAAhB,CAA6B,QAA7B,EAAuC,SAAvC,EAAkD;AAChDE,MAAAA,UAAU,EAAE;AACVR,QAAAA,OAAO,EAAE,qCADC;AAEVO,QAAAA,KAAK,EAAE;AAFG;AADoC,KAAlD;AAMAX,IAAAA,KAAK,CAACC,SAAN,CAAgBS,YAAhB,CAA6B,QAA7B,EAAuC,UAAvC,EAAmD;AACjDG,MAAAA,KAAK,EAAE;AACLT,QAAAA,OAAO,EAAE,eADJ;AAELO,QAAAA,KAAK,EAAE;AAFF;AAD0C,KAAnD;AAMA,QAAIG,aAAa,GAAG,CAClB;AACEV,MAAAA,OAAO,EAAE,aADX;AAEEW,MAAAA,MAAM,EAAE;AACNC,QAAAA,SAAS,EAAE;AACTZ,UAAAA,OAAO,EAAE,WADA;AAETO,UAAAA,KAAK,EAAE;AAFE,SADL;AAKNM,QAAAA,IAAI,EAAEjB,KAAK,CAACC,SAAN,CAAgBJ;AALhB;AAFV,KADkB,EAWlB;AACEO,MAAAA,OAAO,EAAE,OADX;AAEEO,MAAAA,KAAK,EAAE;AAFT,KAXkB,CAApB;AAgBAX,IAAAA,KAAK,CAACC,SAAN,CAAgBJ,MAAhB,CAAuB,QAAvB,EAAiCkB,MAAjC,GAA0Cf,KAAK,CAACC,SAAN,CAAgBJ,MAAhB,CACxC,YADwC,EAExCkB,MAFwC,GAE/B;AACTD,MAAAA,aAAa,EAAEA;AADN,KAFX;AAKAd,IAAAA,KAAK,CAACC,SAAN,CAAgBiB,EAAhB,GAAqBlB,KAAK,CAACC,SAAN,CAAgBJ,MAArC;AACAG,IAAAA,KAAK,CAACC,SAAN,CAAgBkB,GAAhB,GAAsBnB,KAAK,CAACC,SAAN,CAAgBJ,MAAtC;AACD,GAlEA,EAkEEG,KAlEF;AAmEF","sourcesContent":["'use strict'\r\n\r\nmodule.exports = kotlin\r\nkotlin.displayName = 'kotlin'\r\nkotlin.aliases = ['kt', 'kts']\r\nfunction kotlin(Prism) {\r\n  ;(function (Prism) {\r\n    Prism.languages.kotlin = Prism.languages.extend('clike', {\r\n      keyword: {\r\n        // The lookbehind prevents wrong highlighting of e.g. kotlin.properties.get\r\n        pattern:\r\n          /(^|[^.])\\b(?:abstract|actual|annotation|as|break|by|catch|class|companion|const|constructor|continue|crossinline|data|do|dynamic|else|enum|expect|external|final|finally|for|fun|get|if|import|in|infix|init|inline|inner|interface|internal|is|lateinit|noinline|null|object|open|operator|out|override|package|private|protected|public|reified|return|sealed|set|super|suspend|tailrec|this|throw|to|try|typealias|val|var|vararg|when|where|while)\\b/,\r\n        lookbehind: true\r\n      },\r\n      function: [\r\n        {\r\n          pattern: /(?:`[^\\r\\n`]+`|\\b\\w+)(?=\\s*\\()/,\r\n          greedy: true\r\n        },\r\n        {\r\n          pattern: /(\\.)(?:`[^\\r\\n`]+`|\\w+)(?=\\s*\\{)/,\r\n          lookbehind: true,\r\n          greedy: true\r\n        }\r\n      ],\r\n      number:\r\n        /\\b(?:0[xX][\\da-fA-F]+(?:_[\\da-fA-F]+)*|0[bB][01]+(?:_[01]+)*|\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?(?:[eE][+-]?\\d+(?:_\\d+)*)?[fFL]?)\\b/,\r\n      operator:\r\n        /\\+[+=]?|-[-=>]?|==?=?|!(?:!|==?)?|[\\/*%<>]=?|[?:]:?|\\.\\.|&&|\\|\\||\\b(?:and|inv|or|shl|shr|ushr|xor)\\b/\r\n    })\r\n    delete Prism.languages.kotlin['class-name']\r\n    Prism.languages.insertBefore('kotlin', 'string', {\r\n      'raw-string': {\r\n        pattern: /(\"\"\"|''')[\\s\\S]*?\\1/,\r\n        alias: 'string' // See interpolation below\r\n      }\r\n    })\r\n    Prism.languages.insertBefore('kotlin', 'keyword', {\r\n      annotation: {\r\n        pattern: /\\B@(?:\\w+:)?(?:[A-Z]\\w*|\\[[^\\]]+\\])/,\r\n        alias: 'builtin'\r\n      }\r\n    })\r\n    Prism.languages.insertBefore('kotlin', 'function', {\r\n      label: {\r\n        pattern: /\\b\\w+@|@\\w+\\b/,\r\n        alias: 'symbol'\r\n      }\r\n    })\r\n    var interpolation = [\r\n      {\r\n        pattern: /\\$\\{[^}]+\\}/,\r\n        inside: {\r\n          delimiter: {\r\n            pattern: /^\\$\\{|\\}$/,\r\n            alias: 'variable'\r\n          },\r\n          rest: Prism.languages.kotlin\r\n        }\r\n      },\r\n      {\r\n        pattern: /\\$\\w+/,\r\n        alias: 'variable'\r\n      }\r\n    ]\r\n    Prism.languages.kotlin['string'].inside = Prism.languages.kotlin[\r\n      'raw-string'\r\n    ].inside = {\r\n      interpolation: interpolation\r\n    }\r\n    Prism.languages.kt = Prism.languages.kotlin\r\n    Prism.languages.kts = Prism.languages.kotlin\r\n  })(Prism)\r\n}\r\n"]},"metadata":{},"sourceType":"script"}