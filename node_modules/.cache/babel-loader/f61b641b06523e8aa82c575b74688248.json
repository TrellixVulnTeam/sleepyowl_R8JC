{"ast":null,"code":"/// <reference lib=\"WebWorker\"/>\nvar _self = typeof window !== 'undefined' ? window // if in browser\n: typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope ? self // if in worker\n: {} // if in node js\n;\n/**\r\n * Prism: Lightweight, robust, elegant syntax highlighting\r\n *\r\n * @license MIT <https://opensource.org/licenses/MIT>\r\n * @author Lea Verou <https://lea.verou.me>\r\n * @namespace\r\n * @public\r\n */\n\n\nvar Prism = function (_self) {\n  // Private helper vars\n  var lang = /\\blang(?:uage)?-([\\w-]+)\\b/i;\n  var uniqueId = 0; // The grammar object for plaintext\n\n  var plainTextGrammar = {};\n  var _ = {\n    /**\r\n     * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the\r\n     * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load\r\n     * additional languages or plugins yourself.\r\n     *\r\n     * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.\r\n     *\r\n     * You obviously have to change this value before the automatic highlighting started. To do this, you can add an\r\n     * empty Prism object into the global scope before loading the Prism script like this:\r\n     *\r\n     * ```js\r\n     * window.Prism = window.Prism || {};\r\n     * Prism.manual = true;\r\n     * // add a new <script> to load Prism's script\r\n     * ```\r\n     *\r\n     * @default false\r\n     * @type {boolean}\r\n     * @memberof Prism\r\n     * @public\r\n     */\n    manual: _self.Prism && _self.Prism.manual,\n    disableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,\n\n    /**\r\n     * A namespace for utility methods.\r\n     *\r\n     * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may\r\n     * change or disappear at any time.\r\n     *\r\n     * @namespace\r\n     * @memberof Prism\r\n     */\n    util: {\n      encode: function encode(tokens) {\n        if (tokens instanceof Token) {\n          return new Token(tokens.type, encode(tokens.content), tokens.alias);\n        } else if (Array.isArray(tokens)) {\n          return tokens.map(encode);\n        } else {\n          return tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\n        }\n      },\n\n      /**\r\n       * Returns the name of the type of the given value.\r\n       *\r\n       * @param {any} o\r\n       * @returns {string}\r\n       * @example\r\n       * type(null)      === 'Null'\r\n       * type(undefined) === 'Undefined'\r\n       * type(123)       === 'Number'\r\n       * type('foo')     === 'String'\r\n       * type(true)      === 'Boolean'\r\n       * type([1, 2])    === 'Array'\r\n       * type({})        === 'Object'\r\n       * type(String)    === 'Function'\r\n       * type(/abc+/)    === 'RegExp'\r\n       */\n      type: function type(o) {\n        return Object.prototype.toString.call(o).slice(8, -1);\n      },\n\n      /**\r\n       * Returns a unique number for the given object. Later calls will still return the same number.\r\n       *\r\n       * @param {Object} obj\r\n       * @returns {number}\r\n       */\n      objId: function objId(obj) {\n        if (!obj['__id']) {\n          Object.defineProperty(obj, '__id', {\n            value: ++uniqueId\n          });\n        }\n\n        return obj['__id'];\n      },\n\n      /**\r\n       * Creates a deep clone of the given object.\r\n       *\r\n       * The main intended use of this function is to clone language definitions.\r\n       *\r\n       * @param {T} o\r\n       * @param {Record<number, any>} [visited]\r\n       * @returns {T}\r\n       * @template T\r\n       */\n      clone: function deepClone(o, visited) {\n        visited = visited || {};\n        var clone;\n        var id;\n\n        switch (_.util.type(o)) {\n          case 'Object':\n            id = _.util.objId(o);\n\n            if (visited[id]) {\n              return visited[id];\n            }\n\n            clone =\n            /** @type {Record<string, any>} */\n            {};\n            visited[id] = clone;\n\n            for (var key in o) {\n              if (o.hasOwnProperty(key)) {\n                clone[key] = deepClone(o[key], visited);\n              }\n            }\n\n            return (\n              /** @type {any} */\n              clone\n            );\n\n          case 'Array':\n            id = _.util.objId(o);\n\n            if (visited[id]) {\n              return visited[id];\n            }\n\n            clone = [];\n            visited[id] = clone;\n\n            /** @type {Array} */\n\n            /** @type {any} */\n            o.forEach(function (v, i) {\n              clone[i] = deepClone(v, visited);\n            });\n            return (\n              /** @type {any} */\n              clone\n            );\n\n          default:\n            return o;\n        }\n      },\n\n      /**\r\n       * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.\r\n       *\r\n       * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.\r\n       *\r\n       * @param {Element} element\r\n       * @returns {string}\r\n       */\n      getLanguage: function getLanguage(element) {\n        while (element && !lang.test(element.className)) {\n          element = element.parentElement;\n        }\n\n        if (element) {\n          return (element.className.match(lang) || [, 'none'])[1].toLowerCase();\n        }\n\n        return 'none';\n      },\n\n      /**\r\n       * Returns the script element that is currently executing.\r\n       *\r\n       * This does __not__ work for line script element.\r\n       *\r\n       * @returns {HTMLScriptElement | null}\r\n       */\n      currentScript: function currentScript() {\n        if (typeof document === 'undefined') {\n          return null;\n        }\n\n        if ('currentScript' in document && 1 < 2\n        /* hack to trip TS' flow analysis */\n        ) {\n          return (\n            /** @type {any} */\n            document.currentScript\n          );\n        } // IE11 workaround\n        // we'll get the src of the current script by parsing IE11's error stack trace\n        // this will not work for inline scripts\n\n\n        try {\n          throw new Error();\n        } catch (err) {\n          // Get file src url from stack. Specifically works with the format of stack traces in IE.\n          // A stack will look like this:\n          //\n          // Error\n          //    at _.util.currentScript (http://localhost/components/prism-core.js:119:5)\n          //    at Global code (http://localhost/components/prism-core.js:606:1)\n          var src = (/at [^(\\r\\n]*\\((.*):[^:]+:[^:]+\\)$/i.exec(err.stack) || [])[1];\n\n          if (src) {\n            var scripts = document.getElementsByTagName('script');\n\n            for (var i in scripts) {\n              if (scripts[i].src == src) {\n                return scripts[i];\n              }\n            }\n          }\n\n          return null;\n        }\n      },\n\n      /**\r\n       * Returns whether a given class is active for `element`.\r\n       *\r\n       * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated\r\n       * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the\r\n       * given class is just the given class with a `no-` prefix.\r\n       *\r\n       * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is\r\n       * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its\r\n       * ancestors have the given class or the negated version of it, then the default activation will be returned.\r\n       *\r\n       * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated\r\n       * version of it, the class is considered active.\r\n       *\r\n       * @param {Element} element\r\n       * @param {string} className\r\n       * @param {boolean} [defaultActivation=false]\r\n       * @returns {boolean}\r\n       */\n      isActive: function isActive(element, className, defaultActivation) {\n        var no = 'no-' + className;\n\n        while (element) {\n          var classList = element.classList;\n\n          if (classList.contains(className)) {\n            return true;\n          }\n\n          if (classList.contains(no)) {\n            return false;\n          }\n\n          element = element.parentElement;\n        }\n\n        return !!defaultActivation;\n      }\n    },\n\n    /**\r\n     * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.\r\n     *\r\n     * @namespace\r\n     * @memberof Prism\r\n     * @public\r\n     */\n    languages: {\n      /**\r\n       * The grammar for plain, unformatted text.\r\n       */\n      plain: plainTextGrammar,\n      plaintext: plainTextGrammar,\n      text: plainTextGrammar,\n      txt: plainTextGrammar,\n\n      /**\r\n       * Creates a deep copy of the language with the given id and appends the given tokens.\r\n       *\r\n       * If a token in `redef` also appears in the copied language, then the existing token in the copied language\r\n       * will be overwritten at its original position.\r\n       *\r\n       * ## Best practices\r\n       *\r\n       * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)\r\n       * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to\r\n       * understand the language definition because, normally, the order of tokens matters in Prism grammars.\r\n       *\r\n       * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.\r\n       * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.\r\n       *\r\n       * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.\r\n       * @param {Grammar} redef The new tokens to append.\r\n       * @returns {Grammar} The new language created.\r\n       * @public\r\n       * @example\r\n       * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\r\n       *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token\r\n       *     // at its original position\r\n       *     'comment': { ... },\r\n       *     // CSS doesn't have a 'color' token, so this token will be appended\r\n       *     'color': /\\b(?:red|green|blue)\\b/\r\n       * });\r\n       */\n      extend: function extend(id, redef) {\n        var lang = _.util.clone(_.languages[id]);\n\n        for (var key in redef) {\n          lang[key] = redef[key];\n        }\n\n        return lang;\n      },\n\n      /**\r\n       * Inserts tokens _before_ another token in a language definition or any other grammar.\r\n       *\r\n       * ## Usage\r\n       *\r\n       * This helper method makes it easy to modify existing languages. For example, the CSS language definition\r\n       * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded\r\n       * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the\r\n       * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do\r\n       * this:\r\n       *\r\n       * ```js\r\n       * Prism.languages.markup.style = {\r\n       *     // token\r\n       * };\r\n       * ```\r\n       *\r\n       * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens\r\n       * before existing tokens. For the CSS example above, you would use it like this:\r\n       *\r\n       * ```js\r\n       * Prism.languages.insertBefore('markup', 'cdata', {\r\n       *     'style': {\r\n       *         // token\r\n       *     }\r\n       * });\r\n       * ```\r\n       *\r\n       * ## Special cases\r\n       *\r\n       * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar\r\n       * will be ignored.\r\n       *\r\n       * This behavior can be used to insert tokens after `before`:\r\n       *\r\n       * ```js\r\n       * Prism.languages.insertBefore('markup', 'comment', {\r\n       *     'comment': Prism.languages.markup.comment,\r\n       *     // tokens after 'comment'\r\n       * });\r\n       * ```\r\n       *\r\n       * ## Limitations\r\n       *\r\n       * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object\r\n       * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave\r\n       * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily\r\n       * deleting properties which is necessary to insert at arbitrary positions.\r\n       *\r\n       * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.\r\n       * Instead, it will create a new object and replace all references to the target object with the new one. This\r\n       * can be done without temporarily deleting properties, so the iteration order is well-defined.\r\n       *\r\n       * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if\r\n       * you hold the target object in a variable, then the value of the variable will not change.\r\n       *\r\n       * ```js\r\n       * var oldMarkup = Prism.languages.markup;\r\n       * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });\r\n       *\r\n       * assert(oldMarkup !== Prism.languages.markup);\r\n       * assert(newMarkup === Prism.languages.markup);\r\n       * ```\r\n       *\r\n       * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the\r\n       * object to be modified.\r\n       * @param {string} before The key to insert before.\r\n       * @param {Grammar} insert An object containing the key-value pairs to be inserted.\r\n       * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the\r\n       * object to be modified.\r\n       *\r\n       * Defaults to `Prism.languages`.\r\n       * @returns {Grammar} The new grammar object.\r\n       * @public\r\n       */\n      insertBefore: function insertBefore(inside, before, insert, root) {\n        root = root ||\n        /** @type {any} */\n        _.languages;\n        var grammar = root[inside];\n        /** @type {Grammar} */\n\n        var ret = {};\n\n        for (var token in grammar) {\n          if (grammar.hasOwnProperty(token)) {\n            if (token == before) {\n              for (var newToken in insert) {\n                if (insert.hasOwnProperty(newToken)) {\n                  ret[newToken] = insert[newToken];\n                }\n              }\n            } // Do not insert token which also occur in insert. See #1525\n\n\n            if (!insert.hasOwnProperty(token)) {\n              ret[token] = grammar[token];\n            }\n          }\n        }\n\n        var old = root[inside];\n        root[inside] = ret; // Update references in other language definitions\n\n        _.languages.DFS(_.languages, function (key, value) {\n          if (value === old && key != inside) {\n            this[key] = ret;\n          }\n        });\n\n        return ret;\n      },\n      // Traverse a language definition with Depth First Search\n      DFS: function DFS(o, callback, type, visited) {\n        visited = visited || {};\n        var objId = _.util.objId;\n\n        for (var i in o) {\n          if (o.hasOwnProperty(i)) {\n            callback.call(o, i, o[i], type || i);\n            var property = o[i];\n\n            var propertyType = _.util.type(property);\n\n            if (propertyType === 'Object' && !visited[objId(property)]) {\n              visited[objId(property)] = true;\n              DFS(property, callback, null, visited);\n            } else if (propertyType === 'Array' && !visited[objId(property)]) {\n              visited[objId(property)] = true;\n              DFS(property, callback, i, visited);\n            }\n          }\n        }\n      }\n    },\n    plugins: {},\n\n    /**\r\n     * This is the most high-level function in Prism’s API.\r\n     * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on\r\n     * each one of them.\r\n     *\r\n     * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.\r\n     *\r\n     * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.\r\n     * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.\r\n     * @memberof Prism\r\n     * @public\r\n     */\n    highlightAll: function highlightAll(async, callback) {\n      _.highlightAllUnder(document, async, callback);\n    },\n\n    /**\r\n     * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls\r\n     * {@link Prism.highlightElement} on each one of them.\r\n     *\r\n     * The following hooks will be run:\r\n     * 1. `before-highlightall`\r\n     * 2. `before-all-elements-highlight`\r\n     * 3. All hooks of {@link Prism.highlightElement} for each element.\r\n     *\r\n     * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.\r\n     * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.\r\n     * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.\r\n     * @memberof Prism\r\n     * @public\r\n     */\n    highlightAllUnder: function highlightAllUnder(container, async, callback) {\n      var env = {\n        callback: callback,\n        container: container,\n        selector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'\n      };\n\n      _.hooks.run('before-highlightall', env);\n\n      env.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));\n\n      _.hooks.run('before-all-elements-highlight', env);\n\n      for (var i = 0, element; element = env.elements[i++];) {\n        _.highlightElement(element, async === true, env.callback);\n      }\n    },\n\n    /**\r\n     * Highlights the code inside a single element.\r\n     *\r\n     * The following hooks will be run:\r\n     * 1. `before-sanity-check`\r\n     * 2. `before-highlight`\r\n     * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.\r\n     * 4. `before-insert`\r\n     * 5. `after-highlight`\r\n     * 6. `complete`\r\n     *\r\n     * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for\r\n     * the element's language.\r\n     *\r\n     * @param {Element} element The element containing the code.\r\n     * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.\r\n     * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers\r\n     * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is\r\n     * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).\r\n     *\r\n     * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for\r\n     * asynchronous highlighting to work. You can build your own bundle on the\r\n     * [Download page](https://prismjs.com/download.html).\r\n     * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.\r\n     * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.\r\n     * @memberof Prism\r\n     * @public\r\n     */\n    highlightElement: function highlightElement(element, async, callback) {\n      // Find language\n      var language = _.util.getLanguage(element);\n\n      var grammar = _.languages[language]; // Set language on the element, if not present\n\n      element.className = element.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language; // Set language on the parent, for styling\n\n      var parent = element.parentElement;\n\n      if (parent && parent.nodeName.toLowerCase() === 'pre') {\n        parent.className = parent.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;\n      }\n\n      var code = element.textContent;\n      var env = {\n        element: element,\n        language: language,\n        grammar: grammar,\n        code: code\n      };\n\n      function insertHighlightedCode(highlightedCode) {\n        env.highlightedCode = highlightedCode;\n\n        _.hooks.run('before-insert', env);\n\n        env.element.innerHTML = env.highlightedCode;\n\n        _.hooks.run('after-highlight', env);\n\n        _.hooks.run('complete', env);\n\n        callback && callback.call(env.element);\n      }\n\n      _.hooks.run('before-sanity-check', env); // plugins may change/add the parent/element\n\n\n      parent = env.element.parentElement;\n\n      if (parent && parent.nodeName.toLowerCase() === 'pre' && !parent.hasAttribute('tabindex')) {\n        parent.setAttribute('tabindex', '0');\n      }\n\n      if (!env.code) {\n        _.hooks.run('complete', env);\n\n        callback && callback.call(env.element);\n        return;\n      }\n\n      _.hooks.run('before-highlight', env);\n\n      if (!env.grammar) {\n        insertHighlightedCode(_.util.encode(env.code));\n        return;\n      }\n\n      if (async && _self.Worker) {\n        var worker = new Worker(_.filename);\n\n        worker.onmessage = function (evt) {\n          insertHighlightedCode(evt.data);\n        };\n\n        worker.postMessage(JSON.stringify({\n          language: env.language,\n          code: env.code,\n          immediateClose: true\n        }));\n      } else {\n        insertHighlightedCode(_.highlight(env.code, env.grammar, env.language));\n      }\n    },\n\n    /**\r\n     * Low-level function, only use if you know what you’re doing. It accepts a string of text as input\r\n     * and the language definitions to use, and returns a string with the HTML produced.\r\n     *\r\n     * The following hooks will be run:\r\n     * 1. `before-tokenize`\r\n     * 2. `after-tokenize`\r\n     * 3. `wrap`: On each {@link Token}.\r\n     *\r\n     * @param {string} text A string with the code to be highlighted.\r\n     * @param {Grammar} grammar An object containing the tokens to use.\r\n     *\r\n     * Usually a language definition like `Prism.languages.markup`.\r\n     * @param {string} language The name of the language definition passed to `grammar`.\r\n     * @returns {string} The highlighted HTML.\r\n     * @memberof Prism\r\n     * @public\r\n     * @example\r\n     * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');\r\n     */\n    highlight: function highlight(text, grammar, language) {\n      var env = {\n        code: text,\n        grammar: grammar,\n        language: language\n      };\n\n      _.hooks.run('before-tokenize', env);\n\n      env.tokens = _.tokenize(env.code, env.grammar);\n\n      _.hooks.run('after-tokenize', env);\n\n      return Token.stringify(_.util.encode(env.tokens), env.language);\n    },\n\n    /**\r\n     * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\r\n     * and the language definitions to use, and returns an array with the tokenized code.\r\n     *\r\n     * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\r\n     *\r\n     * This method could be useful in other contexts as well, as a very crude parser.\r\n     *\r\n     * @param {string} text A string with the code to be highlighted.\r\n     * @param {Grammar} grammar An object containing the tokens to use.\r\n     *\r\n     * Usually a language definition like `Prism.languages.markup`.\r\n     * @returns {TokenStream} An array of strings and tokens, a token stream.\r\n     * @memberof Prism\r\n     * @public\r\n     * @example\r\n     * let code = `var foo = 0;`;\r\n     * let tokens = Prism.tokenize(code, Prism.languages.javascript);\r\n     * tokens.forEach(token => {\r\n     *     if (token instanceof Prism.Token && token.type === 'number') {\r\n     *         console.log(`Found numeric literal: ${token.content}`);\r\n     *     }\r\n     * });\r\n     */\n    tokenize: function tokenize(text, grammar) {\n      var rest = grammar.rest;\n\n      if (rest) {\n        for (var token in rest) {\n          grammar[token] = rest[token];\n        }\n\n        delete grammar.rest;\n      }\n\n      var tokenList = new LinkedList();\n      addAfter(tokenList, tokenList.head, text);\n      matchGrammar(text, tokenList, grammar, tokenList.head, 0);\n      return toArray(tokenList);\n    },\n\n    /**\r\n     * @namespace\r\n     * @memberof Prism\r\n     * @public\r\n     */\n    hooks: {\n      all: {},\n\n      /**\r\n       * Adds the given callback to the list of callbacks for the given hook.\r\n       *\r\n       * The callback will be invoked when the hook it is registered for is run.\r\n       * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\r\n       *\r\n       * One callback function can be registered to multiple hooks and the same hook multiple times.\r\n       *\r\n       * @param {string} name The name of the hook.\r\n       * @param {HookCallback} callback The callback function which is given environment variables.\r\n       * @public\r\n       */\n      add: function add(name, callback) {\n        var hooks = _.hooks.all;\n        hooks[name] = hooks[name] || [];\n        hooks[name].push(callback);\n      },\n\n      /**\r\n       * Runs a hook invoking all registered callbacks with the given environment variables.\r\n       *\r\n       * Callbacks will be invoked synchronously and in the order in which they were registered.\r\n       *\r\n       * @param {string} name The name of the hook.\r\n       * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\r\n       * @public\r\n       */\n      run: function run(name, env) {\n        var callbacks = _.hooks.all[name];\n\n        if (!callbacks || !callbacks.length) {\n          return;\n        }\n\n        for (var i = 0, callback; callback = callbacks[i++];) {\n          callback(env);\n        }\n      }\n    },\n    Token: Token\n  };\n  _self.Prism = _; // Typescript note:\n  // The following can be used to import the Token type in JSDoc:\n  //\n  //   @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n\n  /**\r\n   * Creates a new token.\r\n   *\r\n   * @param {string} type See {@link Token#type type}\r\n   * @param {string | TokenStream} content See {@link Token#content content}\r\n   * @param {string|string[]} [alias] The alias(es) of the token.\r\n   * @param {string} [matchedStr=\"\"] A copy of the full string this token was created from.\r\n   * @class\r\n   * @global\r\n   * @public\r\n   */\n\n  function Token(type, content, alias, matchedStr) {\n    /**\r\n     * The type of the token.\r\n     *\r\n     * This is usually the key of a pattern in a {@link Grammar}.\r\n     *\r\n     * @type {string}\r\n     * @see GrammarToken\r\n     * @public\r\n     */\n    this.type = type;\n    /**\r\n     * The strings or tokens contained by this token.\r\n     *\r\n     * This will be a token stream if the pattern matched also defined an `inside` grammar.\r\n     *\r\n     * @type {string | TokenStream}\r\n     * @public\r\n     */\n\n    this.content = content;\n    /**\r\n     * The alias(es) of the token.\r\n     *\r\n     * @type {string|string[]}\r\n     * @see GrammarToken\r\n     * @public\r\n     */\n\n    this.alias = alias; // Copy of the full string this token was created from\n\n    this.length = (matchedStr || '').length | 0;\n  }\n  /**\r\n   * A token stream is an array of strings and {@link Token Token} objects.\r\n   *\r\n   * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process\r\n   * them.\r\n   *\r\n   * 1. No adjacent strings.\r\n   * 2. No empty strings.\r\n   *\r\n   *    The only exception here is the token stream that only contains the empty string and nothing else.\r\n   *\r\n   * @typedef {Array<string | Token>} TokenStream\r\n   * @global\r\n   * @public\r\n   */\n\n  /**\r\n   * Converts the given token or token stream to an HTML representation.\r\n   *\r\n   * The following hooks will be run:\r\n   * 1. `wrap`: On each {@link Token}.\r\n   *\r\n   * @param {string | Token | TokenStream} o The token or token stream to be converted.\r\n   * @param {string} language The name of current language.\r\n   * @returns {string} The HTML representation of the token or token stream.\r\n   * @memberof Token\r\n   * @static\r\n   */\n\n\n  Token.stringify = function stringify(o, language) {\n    if (typeof o == 'string') {\n      return o;\n    }\n\n    if (Array.isArray(o)) {\n      var s = '';\n      o.forEach(function (e) {\n        s += stringify(e, language);\n      });\n      return s;\n    }\n\n    var env = {\n      type: o.type,\n      content: stringify(o.content, language),\n      tag: 'span',\n      classes: ['token', o.type],\n      attributes: {},\n      language: language\n    };\n    var aliases = o.alias;\n\n    if (aliases) {\n      if (Array.isArray(aliases)) {\n        Array.prototype.push.apply(env.classes, aliases);\n      } else {\n        env.classes.push(aliases);\n      }\n    }\n\n    _.hooks.run('wrap', env);\n\n    var attributes = '';\n\n    for (var name in env.attributes) {\n      attributes += ' ' + name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';\n    }\n\n    return '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + attributes + '>' + env.content + '</' + env.tag + '>';\n  };\n  /**\r\n   * @param {RegExp} pattern\r\n   * @param {number} pos\r\n   * @param {string} text\r\n   * @param {boolean} lookbehind\r\n   * @returns {RegExpExecArray | null}\r\n   */\n\n\n  function matchPattern(pattern, pos, text, lookbehind) {\n    pattern.lastIndex = pos;\n    var match = pattern.exec(text);\n\n    if (match && lookbehind && match[1]) {\n      // change the match to remove the text matched by the Prism lookbehind group\n      var lookbehindLength = match[1].length;\n      match.index += lookbehindLength;\n      match[0] = match[0].slice(lookbehindLength);\n    }\n\n    return match;\n  }\n  /**\r\n   * @param {string} text\r\n   * @param {LinkedList<string | Token>} tokenList\r\n   * @param {any} grammar\r\n   * @param {LinkedListNode<string | Token>} startNode\r\n   * @param {number} startPos\r\n   * @param {RematchOptions} [rematch]\r\n   * @returns {void}\r\n   * @private\r\n   *\r\n   * @typedef RematchOptions\r\n   * @property {string} cause\r\n   * @property {number} reach\r\n   */\n\n\n  function matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {\n    for (var token in grammar) {\n      if (!grammar.hasOwnProperty(token) || !grammar[token]) {\n        continue;\n      }\n\n      var patterns = grammar[token];\n      patterns = Array.isArray(patterns) ? patterns : [patterns];\n\n      for (var j = 0; j < patterns.length; ++j) {\n        if (rematch && rematch.cause == token + ',' + j) {\n          return;\n        }\n\n        var patternObj = patterns[j];\n        var inside = patternObj.inside;\n        var lookbehind = !!patternObj.lookbehind;\n        var greedy = !!patternObj.greedy;\n        var alias = patternObj.alias;\n\n        if (greedy && !patternObj.pattern.global) {\n          // Without the global flag, lastIndex won't work\n          var flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];\n          patternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');\n        }\n        /** @type {RegExp} */\n\n\n        var pattern = patternObj.pattern || patternObj;\n\n        for ( // iterate the token list and keep track of the current token/string position\n        var currentNode = startNode.next, pos = startPos; currentNode !== tokenList.tail; pos += currentNode.value.length, currentNode = currentNode.next) {\n          if (rematch && pos >= rematch.reach) {\n            break;\n          }\n\n          var str = currentNode.value;\n\n          if (tokenList.length > text.length) {\n            // Something went terribly wrong, ABORT, ABORT!\n            return;\n          }\n\n          if (str instanceof Token) {\n            continue;\n          }\n\n          var removeCount = 1; // this is the to parameter of removeBetween\n\n          var match;\n\n          if (greedy) {\n            match = matchPattern(pattern, pos, text, lookbehind);\n\n            if (!match) {\n              break;\n            }\n\n            var from = match.index;\n            var to = match.index + match[0].length;\n            var p = pos; // find the node that contains the match\n\n            p += currentNode.value.length;\n\n            while (from >= p) {\n              currentNode = currentNode.next;\n              p += currentNode.value.length;\n            } // adjust pos (and p)\n\n\n            p -= currentNode.value.length;\n            pos = p; // the current node is a Token, then the match starts inside another Token, which is invalid\n\n            if (currentNode.value instanceof Token) {\n              continue;\n            } // find the last node which is affected by this match\n\n\n            for (var k = currentNode; k !== tokenList.tail && (p < to || typeof k.value === 'string'); k = k.next) {\n              removeCount++;\n              p += k.value.length;\n            }\n\n            removeCount--; // replace with the new match\n\n            str = text.slice(pos, p);\n            match.index -= pos;\n          } else {\n            match = matchPattern(pattern, 0, str, lookbehind);\n\n            if (!match) {\n              continue;\n            }\n          } // eslint-disable-next-line no-redeclare\n\n\n          var from = match.index;\n          var matchStr = match[0];\n          var before = str.slice(0, from);\n          var after = str.slice(from + matchStr.length);\n          var reach = pos + str.length;\n\n          if (rematch && reach > rematch.reach) {\n            rematch.reach = reach;\n          }\n\n          var removeFrom = currentNode.prev;\n\n          if (before) {\n            removeFrom = addAfter(tokenList, removeFrom, before);\n            pos += before.length;\n          }\n\n          removeRange(tokenList, removeFrom, removeCount);\n          var wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);\n          currentNode = addAfter(tokenList, removeFrom, wrapped);\n\n          if (after) {\n            addAfter(tokenList, currentNode, after);\n          }\n\n          if (removeCount > 1) {\n            // at least one Token object was removed, so we have to do some rematching\n            // this can only happen if the current pattern is greedy\n\n            /** @type {RematchOptions} */\n            var nestedRematch = {\n              cause: token + ',' + j,\n              reach: reach\n            };\n            matchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch); // the reach might have been extended because of the rematching\n\n            if (rematch && nestedRematch.reach > rematch.reach) {\n              rematch.reach = nestedRematch.reach;\n            }\n          }\n        }\n      }\n    }\n  }\n  /**\r\n   * @typedef LinkedListNode\r\n   * @property {T} value\r\n   * @property {LinkedListNode<T> | null} prev The previous node.\r\n   * @property {LinkedListNode<T> | null} next The next node.\r\n   * @template T\r\n   * @private\r\n   */\n\n  /**\r\n   * @template T\r\n   * @private\r\n   */\n\n\n  function LinkedList() {\n    /** @type {LinkedListNode<T>} */\n    var head = {\n      value: null,\n      prev: null,\n      next: null\n    };\n    /** @type {LinkedListNode<T>} */\n\n    var tail = {\n      value: null,\n      prev: head,\n      next: null\n    };\n    head.next = tail;\n    /** @type {LinkedListNode<T>} */\n\n    this.head = head;\n    /** @type {LinkedListNode<T>} */\n\n    this.tail = tail;\n    this.length = 0;\n  }\n  /**\r\n   * Adds a new node with the given value to the list.\r\n   *\r\n   * @param {LinkedList<T>} list\r\n   * @param {LinkedListNode<T>} node\r\n   * @param {T} value\r\n   * @returns {LinkedListNode<T>} The added node.\r\n   * @template T\r\n   */\n\n\n  function addAfter(list, node, value) {\n    // assumes that node != list.tail && values.length >= 0\n    var next = node.next;\n    var newNode = {\n      value: value,\n      prev: node,\n      next: next\n    };\n    node.next = newNode;\n    next.prev = newNode;\n    list.length++;\n    return newNode;\n  }\n  /**\r\n   * Removes `count` nodes after the given node. The given node will not be removed.\r\n   *\r\n   * @param {LinkedList<T>} list\r\n   * @param {LinkedListNode<T>} node\r\n   * @param {number} count\r\n   * @template T\r\n   */\n\n\n  function removeRange(list, node, count) {\n    var next = node.next;\n\n    for (var i = 0; i < count && next !== list.tail; i++) {\n      next = next.next;\n    }\n\n    node.next = next;\n    next.prev = node;\n    list.length -= i;\n  }\n  /**\r\n   * @param {LinkedList<T>} list\r\n   * @returns {T[]}\r\n   * @template T\r\n   */\n\n\n  function toArray(list) {\n    var array = [];\n    var node = list.head.next;\n\n    while (node !== list.tail) {\n      array.push(node.value);\n      node = node.next;\n    }\n\n    return array;\n  }\n\n  if (!_self.document) {\n    if (!_self.addEventListener) {\n      // in Node.js\n      return _;\n    }\n\n    if (!_.disableWorkerMessageHandler) {\n      // In worker\n      _self.addEventListener('message', function (evt) {\n        var message = JSON.parse(evt.data);\n        var lang = message.language;\n        var code = message.code;\n        var immediateClose = message.immediateClose;\n\n        _self.postMessage(_.highlight(code, _.languages[lang], lang));\n\n        if (immediateClose) {\n          _self.close();\n        }\n      }, false);\n    }\n\n    return _;\n  } // Get current script and highlight\n\n\n  var script = _.util.currentScript();\n\n  if (script) {\n    _.filename = script.src;\n\n    if (script.hasAttribute('data-manual')) {\n      _.manual = true;\n    }\n  }\n\n  function highlightAutomaticallyCallback() {\n    if (!_.manual) {\n      _.highlightAll();\n    }\n  }\n\n  if (!_.manual) {\n    // If the document state is \"loading\", then we'll use DOMContentLoaded.\n    // If the document state is \"interactive\" and the prism.js script is deferred, then we'll also use the\n    // DOMContentLoaded event because there might be some plugins or languages which have also been deferred and they\n    // might take longer one animation frame to execute which can create a race condition where only some plugins have\n    // been loaded when Prism.highlightAll() is executed, depending on how fast resources are loaded.\n    // See https://github.com/PrismJS/prism/issues/2102\n    var readyState = document.readyState;\n\n    if (readyState === 'loading' || readyState === 'interactive' && script && script.defer) {\n      document.addEventListener('DOMContentLoaded', highlightAutomaticallyCallback);\n    } else {\n      if (window.requestAnimationFrame) {\n        window.requestAnimationFrame(highlightAutomaticallyCallback);\n      } else {\n        window.setTimeout(highlightAutomaticallyCallback, 16);\n      }\n    }\n  }\n\n  return _;\n}(_self);\n\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = Prism;\n} // hack for components to work correctly in node.js\n\n\nif (typeof global !== 'undefined') {\n  global.Prism = Prism;\n} // some additional documentation/types\n\n/**\r\n * The expansion of a simple `RegExp` literal to support additional properties.\r\n *\r\n * @typedef GrammarToken\r\n * @property {RegExp} pattern The regular expression of the token.\r\n * @property {boolean} [lookbehind=false] If `true`, then the first capturing group of `pattern` will (effectively)\r\n * behave as a lookbehind group meaning that the captured text will not be part of the matched text of the new token.\r\n * @property {boolean} [greedy=false] Whether the token is greedy.\r\n * @property {string|string[]} [alias] An optional alias or list of aliases.\r\n * @property {Grammar} [inside] The nested grammar of this token.\r\n *\r\n * The `inside` grammar will be used to tokenize the text value of each token of this kind.\r\n *\r\n * This can be used to make nested and even recursive language definitions.\r\n *\r\n * Note: This can cause infinite recursion. Be careful when you embed different languages or even the same language into\r\n * each another.\r\n * @global\r\n * @public\r\n */\n\n/**\r\n * @typedef Grammar\r\n * @type {Object<string, RegExp | GrammarToken | Array<RegExp | GrammarToken>>}\r\n * @property {Grammar} [rest] An optional grammar object that will be appended to this grammar.\r\n * @global\r\n * @public\r\n */\n\n/**\r\n * A function which will invoked after an element was successfully highlighted.\r\n *\r\n * @callback HighlightCallback\r\n * @param {Element} element The element successfully highlighted.\r\n * @returns {void}\r\n * @global\r\n * @public\r\n */\n\n/**\r\n * @callback HookCallback\r\n * @param {Object<string, any>} env The environment variables of the hook.\r\n * @returns {void}\r\n * @global\r\n * @public\r\n */","map":{"version":3,"sources":["D:/Rnd/sleepyowl/node_modules/prismjs/components/prism-core.js"],"names":["_self","window","WorkerGlobalScope","self","Prism","lang","uniqueId","plainTextGrammar","_","manual","disableWorkerMessageHandler","util","encode","tokens","Token","type","content","alias","Array","isArray","map","replace","o","Object","prototype","toString","call","slice","objId","obj","defineProperty","value","clone","deepClone","visited","id","key","hasOwnProperty","forEach","v","i","getLanguage","element","test","className","parentElement","match","toLowerCase","currentScript","document","Error","err","src","exec","stack","scripts","getElementsByTagName","isActive","defaultActivation","no","classList","contains","languages","plain","plaintext","text","txt","extend","redef","insertBefore","inside","before","insert","root","grammar","ret","token","newToken","old","DFS","callback","property","propertyType","plugins","highlightAll","async","highlightAllUnder","container","env","selector","hooks","run","elements","apply","querySelectorAll","highlightElement","language","parent","nodeName","code","textContent","insertHighlightedCode","highlightedCode","innerHTML","hasAttribute","setAttribute","Worker","worker","filename","onmessage","evt","data","postMessage","JSON","stringify","immediateClose","highlight","tokenize","rest","tokenList","LinkedList","addAfter","head","matchGrammar","toArray","all","add","name","push","callbacks","length","matchedStr","s","e","tag","classes","attributes","aliases","join","matchPattern","pattern","pos","lookbehind","lastIndex","lookbehindLength","index","startNode","startPos","rematch","patterns","j","cause","patternObj","greedy","global","flags","RegExp","source","currentNode","next","tail","reach","str","removeCount","from","to","p","k","matchStr","after","removeFrom","prev","removeRange","wrapped","nestedRematch","list","node","newNode","count","array","addEventListener","message","parse","close","script","highlightAutomaticallyCallback","readyState","defer","requestAnimationFrame","setTimeout","module","exports"],"mappings":"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","sourcesContent":["/// <reference lib=\"WebWorker\"/>\r\n\r\nvar _self = (typeof window !== 'undefined')\r\n\t? window   // if in browser\r\n\t: (\r\n\t\t(typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)\r\n\t\t\t? self // if in worker\r\n\t\t\t: {}   // if in node js\r\n\t);\r\n\r\n/**\r\n * Prism: Lightweight, robust, elegant syntax highlighting\r\n *\r\n * @license MIT <https://opensource.org/licenses/MIT>\r\n * @author Lea Verou <https://lea.verou.me>\r\n * @namespace\r\n * @public\r\n */\r\nvar Prism = (function (_self) {\r\n\r\n\t// Private helper vars\r\n\tvar lang = /\\blang(?:uage)?-([\\w-]+)\\b/i;\r\n\tvar uniqueId = 0;\r\n\r\n\t// The grammar object for plaintext\r\n\tvar plainTextGrammar = {};\r\n\r\n\r\n\tvar _ = {\r\n\t\t/**\r\n\t\t * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the\r\n\t\t * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load\r\n\t\t * additional languages or plugins yourself.\r\n\t\t *\r\n\t\t * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.\r\n\t\t *\r\n\t\t * You obviously have to change this value before the automatic highlighting started. To do this, you can add an\r\n\t\t * empty Prism object into the global scope before loading the Prism script like this:\r\n\t\t *\r\n\t\t * ```js\r\n\t\t * window.Prism = window.Prism || {};\r\n\t\t * Prism.manual = true;\r\n\t\t * // add a new <script> to load Prism's script\r\n\t\t * ```\r\n\t\t *\r\n\t\t * @default false\r\n\t\t * @type {boolean}\r\n\t\t * @memberof Prism\r\n\t\t * @public\r\n\t\t */\r\n\t\tmanual: _self.Prism && _self.Prism.manual,\r\n\t\tdisableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,\r\n\r\n\t\t/**\r\n\t\t * A namespace for utility methods.\r\n\t\t *\r\n\t\t * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may\r\n\t\t * change or disappear at any time.\r\n\t\t *\r\n\t\t * @namespace\r\n\t\t * @memberof Prism\r\n\t\t */\r\n\t\tutil: {\r\n\t\t\tencode: function encode(tokens) {\r\n\t\t\t\tif (tokens instanceof Token) {\r\n\t\t\t\t\treturn new Token(tokens.type, encode(tokens.content), tokens.alias);\r\n\t\t\t\t} else if (Array.isArray(tokens)) {\r\n\t\t\t\t\treturn tokens.map(encode);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Returns the name of the type of the given value.\r\n\t\t\t *\r\n\t\t\t * @param {any} o\r\n\t\t\t * @returns {string}\r\n\t\t\t * @example\r\n\t\t\t * type(null)      === 'Null'\r\n\t\t\t * type(undefined) === 'Undefined'\r\n\t\t\t * type(123)       === 'Number'\r\n\t\t\t * type('foo')     === 'String'\r\n\t\t\t * type(true)      === 'Boolean'\r\n\t\t\t * type([1, 2])    === 'Array'\r\n\t\t\t * type({})        === 'Object'\r\n\t\t\t * type(String)    === 'Function'\r\n\t\t\t * type(/abc+/)    === 'RegExp'\r\n\t\t\t */\r\n\t\t\ttype: function (o) {\r\n\t\t\t\treturn Object.prototype.toString.call(o).slice(8, -1);\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Returns a unique number for the given object. Later calls will still return the same number.\r\n\t\t\t *\r\n\t\t\t * @param {Object} obj\r\n\t\t\t * @returns {number}\r\n\t\t\t */\r\n\t\t\tobjId: function (obj) {\r\n\t\t\t\tif (!obj['__id']) {\r\n\t\t\t\t\tObject.defineProperty(obj, '__id', { value: ++uniqueId });\r\n\t\t\t\t}\r\n\t\t\t\treturn obj['__id'];\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Creates a deep clone of the given object.\r\n\t\t\t *\r\n\t\t\t * The main intended use of this function is to clone language definitions.\r\n\t\t\t *\r\n\t\t\t * @param {T} o\r\n\t\t\t * @param {Record<number, any>} [visited]\r\n\t\t\t * @returns {T}\r\n\t\t\t * @template T\r\n\t\t\t */\r\n\t\t\tclone: function deepClone(o, visited) {\r\n\t\t\t\tvisited = visited || {};\r\n\r\n\t\t\t\tvar clone; var id;\r\n\t\t\t\tswitch (_.util.type(o)) {\r\n\t\t\t\t\tcase 'Object':\r\n\t\t\t\t\t\tid = _.util.objId(o);\r\n\t\t\t\t\t\tif (visited[id]) {\r\n\t\t\t\t\t\t\treturn visited[id];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tclone = /** @type {Record<string, any>} */ ({});\r\n\t\t\t\t\t\tvisited[id] = clone;\r\n\r\n\t\t\t\t\t\tfor (var key in o) {\r\n\t\t\t\t\t\t\tif (o.hasOwnProperty(key)) {\r\n\t\t\t\t\t\t\t\tclone[key] = deepClone(o[key], visited);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\r\n\r\n\t\t\t\t\tcase 'Array':\r\n\t\t\t\t\t\tid = _.util.objId(o);\r\n\t\t\t\t\t\tif (visited[id]) {\r\n\t\t\t\t\t\t\treturn visited[id];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tclone = [];\r\n\t\t\t\t\t\tvisited[id] = clone;\r\n\r\n\t\t\t\t\t\t(/** @type {Array} */(/** @type {any} */(o))).forEach(function (v, i) {\r\n\t\t\t\t\t\t\tclone[i] = deepClone(v, visited);\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn o;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.\r\n\t\t\t *\r\n\t\t\t * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.\r\n\t\t\t *\r\n\t\t\t * @param {Element} element\r\n\t\t\t * @returns {string}\r\n\t\t\t */\r\n\t\t\tgetLanguage: function (element) {\r\n\t\t\t\twhile (element && !lang.test(element.className)) {\r\n\t\t\t\t\telement = element.parentElement;\r\n\t\t\t\t}\r\n\t\t\t\tif (element) {\r\n\t\t\t\t\treturn (element.className.match(lang) || [, 'none'])[1].toLowerCase();\r\n\t\t\t\t}\r\n\t\t\t\treturn 'none';\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Returns the script element that is currently executing.\r\n\t\t\t *\r\n\t\t\t * This does __not__ work for line script element.\r\n\t\t\t *\r\n\t\t\t * @returns {HTMLScriptElement | null}\r\n\t\t\t */\r\n\t\t\tcurrentScript: function () {\r\n\t\t\t\tif (typeof document === 'undefined') {\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\tif ('currentScript' in document && 1 < 2 /* hack to trip TS' flow analysis */) {\r\n\t\t\t\t\treturn /** @type {any} */ (document.currentScript);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// IE11 workaround\r\n\t\t\t\t// we'll get the src of the current script by parsing IE11's error stack trace\r\n\t\t\t\t// this will not work for inline scripts\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tthrow new Error();\r\n\t\t\t\t} catch (err) {\r\n\t\t\t\t\t// Get file src url from stack. Specifically works with the format of stack traces in IE.\r\n\t\t\t\t\t// A stack will look like this:\r\n\t\t\t\t\t//\r\n\t\t\t\t\t// Error\r\n\t\t\t\t\t//    at _.util.currentScript (http://localhost/components/prism-core.js:119:5)\r\n\t\t\t\t\t//    at Global code (http://localhost/components/prism-core.js:606:1)\r\n\r\n\t\t\t\t\tvar src = (/at [^(\\r\\n]*\\((.*):[^:]+:[^:]+\\)$/i.exec(err.stack) || [])[1];\r\n\t\t\t\t\tif (src) {\r\n\t\t\t\t\t\tvar scripts = document.getElementsByTagName('script');\r\n\t\t\t\t\t\tfor (var i in scripts) {\r\n\t\t\t\t\t\t\tif (scripts[i].src == src) {\r\n\t\t\t\t\t\t\t\treturn scripts[i];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Returns whether a given class is active for `element`.\r\n\t\t\t *\r\n\t\t\t * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated\r\n\t\t\t * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the\r\n\t\t\t * given class is just the given class with a `no-` prefix.\r\n\t\t\t *\r\n\t\t\t * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is\r\n\t\t\t * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its\r\n\t\t\t * ancestors have the given class or the negated version of it, then the default activation will be returned.\r\n\t\t\t *\r\n\t\t\t * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated\r\n\t\t\t * version of it, the class is considered active.\r\n\t\t\t *\r\n\t\t\t * @param {Element} element\r\n\t\t\t * @param {string} className\r\n\t\t\t * @param {boolean} [defaultActivation=false]\r\n\t\t\t * @returns {boolean}\r\n\t\t\t */\r\n\t\t\tisActive: function (element, className, defaultActivation) {\r\n\t\t\t\tvar no = 'no-' + className;\r\n\r\n\t\t\t\twhile (element) {\r\n\t\t\t\t\tvar classList = element.classList;\r\n\t\t\t\t\tif (classList.contains(className)) {\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (classList.contains(no)) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telement = element.parentElement;\r\n\t\t\t\t}\r\n\t\t\t\treturn !!defaultActivation;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.\r\n\t\t *\r\n\t\t * @namespace\r\n\t\t * @memberof Prism\r\n\t\t * @public\r\n\t\t */\r\n\t\tlanguages: {\r\n\t\t\t/**\r\n\t\t\t * The grammar for plain, unformatted text.\r\n\t\t\t */\r\n\t\t\tplain: plainTextGrammar,\r\n\t\t\tplaintext: plainTextGrammar,\r\n\t\t\ttext: plainTextGrammar,\r\n\t\t\ttxt: plainTextGrammar,\r\n\r\n\t\t\t/**\r\n\t\t\t * Creates a deep copy of the language with the given id and appends the given tokens.\r\n\t\t\t *\r\n\t\t\t * If a token in `redef` also appears in the copied language, then the existing token in the copied language\r\n\t\t\t * will be overwritten at its original position.\r\n\t\t\t *\r\n\t\t\t * ## Best practices\r\n\t\t\t *\r\n\t\t\t * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)\r\n\t\t\t * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to\r\n\t\t\t * understand the language definition because, normally, the order of tokens matters in Prism grammars.\r\n\t\t\t *\r\n\t\t\t * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.\r\n\t\t\t * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.\r\n\t\t\t *\r\n\t\t\t * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.\r\n\t\t\t * @param {Grammar} redef The new tokens to append.\r\n\t\t\t * @returns {Grammar} The new language created.\r\n\t\t\t * @public\r\n\t\t\t * @example\r\n\t\t\t * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\r\n\t\t\t *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token\r\n\t\t\t *     // at its original position\r\n\t\t\t *     'comment': { ... },\r\n\t\t\t *     // CSS doesn't have a 'color' token, so this token will be appended\r\n\t\t\t *     'color': /\\b(?:red|green|blue)\\b/\r\n\t\t\t * });\r\n\t\t\t */\r\n\t\t\textend: function (id, redef) {\r\n\t\t\t\tvar lang = _.util.clone(_.languages[id]);\r\n\r\n\t\t\t\tfor (var key in redef) {\r\n\t\t\t\t\tlang[key] = redef[key];\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn lang;\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Inserts tokens _before_ another token in a language definition or any other grammar.\r\n\t\t\t *\r\n\t\t\t * ## Usage\r\n\t\t\t *\r\n\t\t\t * This helper method makes it easy to modify existing languages. For example, the CSS language definition\r\n\t\t\t * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded\r\n\t\t\t * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the\r\n\t\t\t * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do\r\n\t\t\t * this:\r\n\t\t\t *\r\n\t\t\t * ```js\r\n\t\t\t * Prism.languages.markup.style = {\r\n\t\t\t *     // token\r\n\t\t\t * };\r\n\t\t\t * ```\r\n\t\t\t *\r\n\t\t\t * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens\r\n\t\t\t * before existing tokens. For the CSS example above, you would use it like this:\r\n\t\t\t *\r\n\t\t\t * ```js\r\n\t\t\t * Prism.languages.insertBefore('markup', 'cdata', {\r\n\t\t\t *     'style': {\r\n\t\t\t *         // token\r\n\t\t\t *     }\r\n\t\t\t * });\r\n\t\t\t * ```\r\n\t\t\t *\r\n\t\t\t * ## Special cases\r\n\t\t\t *\r\n\t\t\t * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar\r\n\t\t\t * will be ignored.\r\n\t\t\t *\r\n\t\t\t * This behavior can be used to insert tokens after `before`:\r\n\t\t\t *\r\n\t\t\t * ```js\r\n\t\t\t * Prism.languages.insertBefore('markup', 'comment', {\r\n\t\t\t *     'comment': Prism.languages.markup.comment,\r\n\t\t\t *     // tokens after 'comment'\r\n\t\t\t * });\r\n\t\t\t * ```\r\n\t\t\t *\r\n\t\t\t * ## Limitations\r\n\t\t\t *\r\n\t\t\t * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object\r\n\t\t\t * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave\r\n\t\t\t * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily\r\n\t\t\t * deleting properties which is necessary to insert at arbitrary positions.\r\n\t\t\t *\r\n\t\t\t * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.\r\n\t\t\t * Instead, it will create a new object and replace all references to the target object with the new one. This\r\n\t\t\t * can be done without temporarily deleting properties, so the iteration order is well-defined.\r\n\t\t\t *\r\n\t\t\t * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if\r\n\t\t\t * you hold the target object in a variable, then the value of the variable will not change.\r\n\t\t\t *\r\n\t\t\t * ```js\r\n\t\t\t * var oldMarkup = Prism.languages.markup;\r\n\t\t\t * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });\r\n\t\t\t *\r\n\t\t\t * assert(oldMarkup !== Prism.languages.markup);\r\n\t\t\t * assert(newMarkup === Prism.languages.markup);\r\n\t\t\t * ```\r\n\t\t\t *\r\n\t\t\t * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the\r\n\t\t\t * object to be modified.\r\n\t\t\t * @param {string} before The key to insert before.\r\n\t\t\t * @param {Grammar} insert An object containing the key-value pairs to be inserted.\r\n\t\t\t * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the\r\n\t\t\t * object to be modified.\r\n\t\t\t *\r\n\t\t\t * Defaults to `Prism.languages`.\r\n\t\t\t * @returns {Grammar} The new grammar object.\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tinsertBefore: function (inside, before, insert, root) {\r\n\t\t\t\troot = root || /** @type {any} */ (_.languages);\r\n\t\t\t\tvar grammar = root[inside];\r\n\t\t\t\t/** @type {Grammar} */\r\n\t\t\t\tvar ret = {};\r\n\r\n\t\t\t\tfor (var token in grammar) {\r\n\t\t\t\t\tif (grammar.hasOwnProperty(token)) {\r\n\r\n\t\t\t\t\t\tif (token == before) {\r\n\t\t\t\t\t\t\tfor (var newToken in insert) {\r\n\t\t\t\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {\r\n\t\t\t\t\t\t\t\t\tret[newToken] = insert[newToken];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Do not insert token which also occur in insert. See #1525\r\n\t\t\t\t\t\tif (!insert.hasOwnProperty(token)) {\r\n\t\t\t\t\t\t\tret[token] = grammar[token];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar old = root[inside];\r\n\t\t\t\troot[inside] = ret;\r\n\r\n\t\t\t\t// Update references in other language definitions\r\n\t\t\t\t_.languages.DFS(_.languages, function (key, value) {\r\n\t\t\t\t\tif (value === old && key != inside) {\r\n\t\t\t\t\t\tthis[key] = ret;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn ret;\r\n\t\t\t},\r\n\r\n\t\t\t// Traverse a language definition with Depth First Search\r\n\t\t\tDFS: function DFS(o, callback, type, visited) {\r\n\t\t\t\tvisited = visited || {};\r\n\r\n\t\t\t\tvar objId = _.util.objId;\r\n\r\n\t\t\t\tfor (var i in o) {\r\n\t\t\t\t\tif (o.hasOwnProperty(i)) {\r\n\t\t\t\t\t\tcallback.call(o, i, o[i], type || i);\r\n\r\n\t\t\t\t\t\tvar property = o[i];\r\n\t\t\t\t\t\tvar propertyType = _.util.type(property);\r\n\r\n\t\t\t\t\t\tif (propertyType === 'Object' && !visited[objId(property)]) {\r\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\r\n\t\t\t\t\t\t\tDFS(property, callback, null, visited);\r\n\t\t\t\t\t\t} else if (propertyType === 'Array' && !visited[objId(property)]) {\r\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\r\n\t\t\t\t\t\t\tDFS(property, callback, i, visited);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tplugins: {},\r\n\r\n\t\t/**\r\n\t\t * This is the most high-level function in Prism’s API.\r\n\t\t * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on\r\n\t\t * each one of them.\r\n\t\t *\r\n\t\t * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.\r\n\t\t *\r\n\t\t * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.\r\n\t\t * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.\r\n\t\t * @memberof Prism\r\n\t\t * @public\r\n\t\t */\r\n\t\thighlightAll: function (async, callback) {\r\n\t\t\t_.highlightAllUnder(document, async, callback);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls\r\n\t\t * {@link Prism.highlightElement} on each one of them.\r\n\t\t *\r\n\t\t * The following hooks will be run:\r\n\t\t * 1. `before-highlightall`\r\n\t\t * 2. `before-all-elements-highlight`\r\n\t\t * 3. All hooks of {@link Prism.highlightElement} for each element.\r\n\t\t *\r\n\t\t * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.\r\n\t\t * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.\r\n\t\t * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.\r\n\t\t * @memberof Prism\r\n\t\t * @public\r\n\t\t */\r\n\t\thighlightAllUnder: function (container, async, callback) {\r\n\t\t\tvar env = {\r\n\t\t\t\tcallback: callback,\r\n\t\t\t\tcontainer: container,\r\n\t\t\t\tselector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'\r\n\t\t\t};\r\n\r\n\t\t\t_.hooks.run('before-highlightall', env);\r\n\r\n\t\t\tenv.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));\r\n\r\n\t\t\t_.hooks.run('before-all-elements-highlight', env);\r\n\r\n\t\t\tfor (var i = 0, element; (element = env.elements[i++]);) {\r\n\t\t\t\t_.highlightElement(element, async === true, env.callback);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Highlights the code inside a single element.\r\n\t\t *\r\n\t\t * The following hooks will be run:\r\n\t\t * 1. `before-sanity-check`\r\n\t\t * 2. `before-highlight`\r\n\t\t * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.\r\n\t\t * 4. `before-insert`\r\n\t\t * 5. `after-highlight`\r\n\t\t * 6. `complete`\r\n\t\t *\r\n\t\t * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for\r\n\t\t * the element's language.\r\n\t\t *\r\n\t\t * @param {Element} element The element containing the code.\r\n\t\t * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.\r\n\t\t * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers\r\n\t\t * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is\r\n\t\t * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).\r\n\t\t *\r\n\t\t * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for\r\n\t\t * asynchronous highlighting to work. You can build your own bundle on the\r\n\t\t * [Download page](https://prismjs.com/download.html).\r\n\t\t * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.\r\n\t\t * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.\r\n\t\t * @memberof Prism\r\n\t\t * @public\r\n\t\t */\r\n\t\thighlightElement: function (element, async, callback) {\r\n\t\t\t// Find language\r\n\t\t\tvar language = _.util.getLanguage(element);\r\n\t\t\tvar grammar = _.languages[language];\r\n\r\n\t\t\t// Set language on the element, if not present\r\n\t\t\telement.className = element.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;\r\n\r\n\t\t\t// Set language on the parent, for styling\r\n\t\t\tvar parent = element.parentElement;\r\n\t\t\tif (parent && parent.nodeName.toLowerCase() === 'pre') {\r\n\t\t\t\tparent.className = parent.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;\r\n\t\t\t}\r\n\r\n\t\t\tvar code = element.textContent;\r\n\r\n\t\t\tvar env = {\r\n\t\t\t\telement: element,\r\n\t\t\t\tlanguage: language,\r\n\t\t\t\tgrammar: grammar,\r\n\t\t\t\tcode: code\r\n\t\t\t};\r\n\r\n\t\t\tfunction insertHighlightedCode(highlightedCode) {\r\n\t\t\t\tenv.highlightedCode = highlightedCode;\r\n\r\n\t\t\t\t_.hooks.run('before-insert', env);\r\n\r\n\t\t\t\tenv.element.innerHTML = env.highlightedCode;\r\n\r\n\t\t\t\t_.hooks.run('after-highlight', env);\r\n\t\t\t\t_.hooks.run('complete', env);\r\n\t\t\t\tcallback && callback.call(env.element);\r\n\t\t\t}\r\n\r\n\t\t\t_.hooks.run('before-sanity-check', env);\r\n\r\n\t\t\t// plugins may change/add the parent/element\r\n\t\t\tparent = env.element.parentElement;\r\n\t\t\tif (parent && parent.nodeName.toLowerCase() === 'pre' && !parent.hasAttribute('tabindex')) {\r\n\t\t\t\tparent.setAttribute('tabindex', '0');\r\n\t\t\t}\r\n\r\n\t\t\tif (!env.code) {\r\n\t\t\t\t_.hooks.run('complete', env);\r\n\t\t\t\tcallback && callback.call(env.element);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t_.hooks.run('before-highlight', env);\r\n\r\n\t\t\tif (!env.grammar) {\r\n\t\t\t\tinsertHighlightedCode(_.util.encode(env.code));\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (async && _self.Worker) {\r\n\t\t\t\tvar worker = new Worker(_.filename);\r\n\r\n\t\t\t\tworker.onmessage = function (evt) {\r\n\t\t\t\t\tinsertHighlightedCode(evt.data);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tworker.postMessage(JSON.stringify({\r\n\t\t\t\t\tlanguage: env.language,\r\n\t\t\t\t\tcode: env.code,\r\n\t\t\t\t\timmediateClose: true\r\n\t\t\t\t}));\r\n\t\t\t} else {\r\n\t\t\t\tinsertHighlightedCode(_.highlight(env.code, env.grammar, env.language));\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Low-level function, only use if you know what you’re doing. It accepts a string of text as input\r\n\t\t * and the language definitions to use, and returns a string with the HTML produced.\r\n\t\t *\r\n\t\t * The following hooks will be run:\r\n\t\t * 1. `before-tokenize`\r\n\t\t * 2. `after-tokenize`\r\n\t\t * 3. `wrap`: On each {@link Token}.\r\n\t\t *\r\n\t\t * @param {string} text A string with the code to be highlighted.\r\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\r\n\t\t *\r\n\t\t * Usually a language definition like `Prism.languages.markup`.\r\n\t\t * @param {string} language The name of the language definition passed to `grammar`.\r\n\t\t * @returns {string} The highlighted HTML.\r\n\t\t * @memberof Prism\r\n\t\t * @public\r\n\t\t * @example\r\n\t\t * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');\r\n\t\t */\r\n\t\thighlight: function (text, grammar, language) {\r\n\t\t\tvar env = {\r\n\t\t\t\tcode: text,\r\n\t\t\t\tgrammar: grammar,\r\n\t\t\t\tlanguage: language\r\n\t\t\t};\r\n\t\t\t_.hooks.run('before-tokenize', env);\r\n\t\t\tenv.tokens = _.tokenize(env.code, env.grammar);\r\n\t\t\t_.hooks.run('after-tokenize', env);\r\n\t\t\treturn Token.stringify(_.util.encode(env.tokens), env.language);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\r\n\t\t * and the language definitions to use, and returns an array with the tokenized code.\r\n\t\t *\r\n\t\t * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\r\n\t\t *\r\n\t\t * This method could be useful in other contexts as well, as a very crude parser.\r\n\t\t *\r\n\t\t * @param {string} text A string with the code to be highlighted.\r\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\r\n\t\t *\r\n\t\t * Usually a language definition like `Prism.languages.markup`.\r\n\t\t * @returns {TokenStream} An array of strings and tokens, a token stream.\r\n\t\t * @memberof Prism\r\n\t\t * @public\r\n\t\t * @example\r\n\t\t * let code = `var foo = 0;`;\r\n\t\t * let tokens = Prism.tokenize(code, Prism.languages.javascript);\r\n\t\t * tokens.forEach(token => {\r\n\t\t *     if (token instanceof Prism.Token && token.type === 'number') {\r\n\t\t *         console.log(`Found numeric literal: ${token.content}`);\r\n\t\t *     }\r\n\t\t * });\r\n\t\t */\r\n\t\ttokenize: function (text, grammar) {\r\n\t\t\tvar rest = grammar.rest;\r\n\t\t\tif (rest) {\r\n\t\t\t\tfor (var token in rest) {\r\n\t\t\t\t\tgrammar[token] = rest[token];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdelete grammar.rest;\r\n\t\t\t}\r\n\r\n\t\t\tvar tokenList = new LinkedList();\r\n\t\t\taddAfter(tokenList, tokenList.head, text);\r\n\r\n\t\t\tmatchGrammar(text, tokenList, grammar, tokenList.head, 0);\r\n\r\n\t\t\treturn toArray(tokenList);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * @namespace\r\n\t\t * @memberof Prism\r\n\t\t * @public\r\n\t\t */\r\n\t\thooks: {\r\n\t\t\tall: {},\r\n\r\n\t\t\t/**\r\n\t\t\t * Adds the given callback to the list of callbacks for the given hook.\r\n\t\t\t *\r\n\t\t\t * The callback will be invoked when the hook it is registered for is run.\r\n\t\t\t * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\r\n\t\t\t *\r\n\t\t\t * One callback function can be registered to multiple hooks and the same hook multiple times.\r\n\t\t\t *\r\n\t\t\t * @param {string} name The name of the hook.\r\n\t\t\t * @param {HookCallback} callback The callback function which is given environment variables.\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tadd: function (name, callback) {\r\n\t\t\t\tvar hooks = _.hooks.all;\r\n\r\n\t\t\t\thooks[name] = hooks[name] || [];\r\n\r\n\t\t\t\thooks[name].push(callback);\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Runs a hook invoking all registered callbacks with the given environment variables.\r\n\t\t\t *\r\n\t\t\t * Callbacks will be invoked synchronously and in the order in which they were registered.\r\n\t\t\t *\r\n\t\t\t * @param {string} name The name of the hook.\r\n\t\t\t * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\trun: function (name, env) {\r\n\t\t\t\tvar callbacks = _.hooks.all[name];\r\n\r\n\t\t\t\tif (!callbacks || !callbacks.length) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (var i = 0, callback; (callback = callbacks[i++]);) {\r\n\t\t\t\t\tcallback(env);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tToken: Token\r\n\t};\r\n\t_self.Prism = _;\r\n\r\n\r\n\t// Typescript note:\r\n\t// The following can be used to import the Token type in JSDoc:\r\n\t//\r\n\t//   @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\r\n\r\n\t/**\r\n\t * Creates a new token.\r\n\t *\r\n\t * @param {string} type See {@link Token#type type}\r\n\t * @param {string | TokenStream} content See {@link Token#content content}\r\n\t * @param {string|string[]} [alias] The alias(es) of the token.\r\n\t * @param {string} [matchedStr=\"\"] A copy of the full string this token was created from.\r\n\t * @class\r\n\t * @global\r\n\t * @public\r\n\t */\r\n\tfunction Token(type, content, alias, matchedStr) {\r\n\t\t/**\r\n\t\t * The type of the token.\r\n\t\t *\r\n\t\t * This is usually the key of a pattern in a {@link Grammar}.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t * @see GrammarToken\r\n\t\t * @public\r\n\t\t */\r\n\t\tthis.type = type;\r\n\t\t/**\r\n\t\t * The strings or tokens contained by this token.\r\n\t\t *\r\n\t\t * This will be a token stream if the pattern matched also defined an `inside` grammar.\r\n\t\t *\r\n\t\t * @type {string | TokenStream}\r\n\t\t * @public\r\n\t\t */\r\n\t\tthis.content = content;\r\n\t\t/**\r\n\t\t * The alias(es) of the token.\r\n\t\t *\r\n\t\t * @type {string|string[]}\r\n\t\t * @see GrammarToken\r\n\t\t * @public\r\n\t\t */\r\n\t\tthis.alias = alias;\r\n\t\t// Copy of the full string this token was created from\r\n\t\tthis.length = (matchedStr || '').length | 0;\r\n\t}\r\n\r\n\t/**\r\n\t * A token stream is an array of strings and {@link Token Token} objects.\r\n\t *\r\n\t * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process\r\n\t * them.\r\n\t *\r\n\t * 1. No adjacent strings.\r\n\t * 2. No empty strings.\r\n\t *\r\n\t *    The only exception here is the token stream that only contains the empty string and nothing else.\r\n\t *\r\n\t * @typedef {Array<string | Token>} TokenStream\r\n\t * @global\r\n\t * @public\r\n\t */\r\n\r\n\t/**\r\n\t * Converts the given token or token stream to an HTML representation.\r\n\t *\r\n\t * The following hooks will be run:\r\n\t * 1. `wrap`: On each {@link Token}.\r\n\t *\r\n\t * @param {string | Token | TokenStream} o The token or token stream to be converted.\r\n\t * @param {string} language The name of current language.\r\n\t * @returns {string} The HTML representation of the token or token stream.\r\n\t * @memberof Token\r\n\t * @static\r\n\t */\r\n\tToken.stringify = function stringify(o, language) {\r\n\t\tif (typeof o == 'string') {\r\n\t\t\treturn o;\r\n\t\t}\r\n\t\tif (Array.isArray(o)) {\r\n\t\t\tvar s = '';\r\n\t\t\to.forEach(function (e) {\r\n\t\t\t\ts += stringify(e, language);\r\n\t\t\t});\r\n\t\t\treturn s;\r\n\t\t}\r\n\r\n\t\tvar env = {\r\n\t\t\ttype: o.type,\r\n\t\t\tcontent: stringify(o.content, language),\r\n\t\t\ttag: 'span',\r\n\t\t\tclasses: ['token', o.type],\r\n\t\t\tattributes: {},\r\n\t\t\tlanguage: language\r\n\t\t};\r\n\r\n\t\tvar aliases = o.alias;\r\n\t\tif (aliases) {\r\n\t\t\tif (Array.isArray(aliases)) {\r\n\t\t\t\tArray.prototype.push.apply(env.classes, aliases);\r\n\t\t\t} else {\r\n\t\t\t\tenv.classes.push(aliases);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t_.hooks.run('wrap', env);\r\n\r\n\t\tvar attributes = '';\r\n\t\tfor (var name in env.attributes) {\r\n\t\t\tattributes += ' ' + name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';\r\n\t\t}\r\n\r\n\t\treturn '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + attributes + '>' + env.content + '</' + env.tag + '>';\r\n\t};\r\n\r\n\t/**\r\n\t * @param {RegExp} pattern\r\n\t * @param {number} pos\r\n\t * @param {string} text\r\n\t * @param {boolean} lookbehind\r\n\t * @returns {RegExpExecArray | null}\r\n\t */\r\n\tfunction matchPattern(pattern, pos, text, lookbehind) {\r\n\t\tpattern.lastIndex = pos;\r\n\t\tvar match = pattern.exec(text);\r\n\t\tif (match && lookbehind && match[1]) {\r\n\t\t\t// change the match to remove the text matched by the Prism lookbehind group\r\n\t\t\tvar lookbehindLength = match[1].length;\r\n\t\t\tmatch.index += lookbehindLength;\r\n\t\t\tmatch[0] = match[0].slice(lookbehindLength);\r\n\t\t}\r\n\t\treturn match;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} text\r\n\t * @param {LinkedList<string | Token>} tokenList\r\n\t * @param {any} grammar\r\n\t * @param {LinkedListNode<string | Token>} startNode\r\n\t * @param {number} startPos\r\n\t * @param {RematchOptions} [rematch]\r\n\t * @returns {void}\r\n\t * @private\r\n\t *\r\n\t * @typedef RematchOptions\r\n\t * @property {string} cause\r\n\t * @property {number} reach\r\n\t */\r\n\tfunction matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {\r\n\t\tfor (var token in grammar) {\r\n\t\t\tif (!grammar.hasOwnProperty(token) || !grammar[token]) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tvar patterns = grammar[token];\r\n\t\t\tpatterns = Array.isArray(patterns) ? patterns : [patterns];\r\n\r\n\t\t\tfor (var j = 0; j < patterns.length; ++j) {\r\n\t\t\t\tif (rematch && rematch.cause == token + ',' + j) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar patternObj = patterns[j];\r\n\t\t\t\tvar inside = patternObj.inside;\r\n\t\t\t\tvar lookbehind = !!patternObj.lookbehind;\r\n\t\t\t\tvar greedy = !!patternObj.greedy;\r\n\t\t\t\tvar alias = patternObj.alias;\r\n\r\n\t\t\t\tif (greedy && !patternObj.pattern.global) {\r\n\t\t\t\t\t// Without the global flag, lastIndex won't work\r\n\t\t\t\t\tvar flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];\r\n\t\t\t\t\tpatternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/** @type {RegExp} */\r\n\t\t\t\tvar pattern = patternObj.pattern || patternObj;\r\n\r\n\t\t\t\tfor ( // iterate the token list and keep track of the current token/string position\r\n\t\t\t\t\tvar currentNode = startNode.next, pos = startPos;\r\n\t\t\t\t\tcurrentNode !== tokenList.tail;\r\n\t\t\t\t\tpos += currentNode.value.length, currentNode = currentNode.next\r\n\t\t\t\t) {\r\n\r\n\t\t\t\t\tif (rematch && pos >= rematch.reach) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar str = currentNode.value;\r\n\r\n\t\t\t\t\tif (tokenList.length > text.length) {\r\n\t\t\t\t\t\t// Something went terribly wrong, ABORT, ABORT!\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (str instanceof Token) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar removeCount = 1; // this is the to parameter of removeBetween\r\n\t\t\t\t\tvar match;\r\n\r\n\t\t\t\t\tif (greedy) {\r\n\t\t\t\t\t\tmatch = matchPattern(pattern, pos, text, lookbehind);\r\n\t\t\t\t\t\tif (!match) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar from = match.index;\r\n\t\t\t\t\t\tvar to = match.index + match[0].length;\r\n\t\t\t\t\t\tvar p = pos;\r\n\r\n\t\t\t\t\t\t// find the node that contains the match\r\n\t\t\t\t\t\tp += currentNode.value.length;\r\n\t\t\t\t\t\twhile (from >= p) {\r\n\t\t\t\t\t\t\tcurrentNode = currentNode.next;\r\n\t\t\t\t\t\t\tp += currentNode.value.length;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// adjust pos (and p)\r\n\t\t\t\t\t\tp -= currentNode.value.length;\r\n\t\t\t\t\t\tpos = p;\r\n\r\n\t\t\t\t\t\t// the current node is a Token, then the match starts inside another Token, which is invalid\r\n\t\t\t\t\t\tif (currentNode.value instanceof Token) {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// find the last node which is affected by this match\r\n\t\t\t\t\t\tfor (\r\n\t\t\t\t\t\t\tvar k = currentNode;\r\n\t\t\t\t\t\t\tk !== tokenList.tail && (p < to || typeof k.value === 'string');\r\n\t\t\t\t\t\t\tk = k.next\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tremoveCount++;\r\n\t\t\t\t\t\t\tp += k.value.length;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tremoveCount--;\r\n\r\n\t\t\t\t\t\t// replace with the new match\r\n\t\t\t\t\t\tstr = text.slice(pos, p);\r\n\t\t\t\t\t\tmatch.index -= pos;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmatch = matchPattern(pattern, 0, str, lookbehind);\r\n\t\t\t\t\t\tif (!match) {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// eslint-disable-next-line no-redeclare\r\n\t\t\t\t\tvar from = match.index;\r\n\t\t\t\t\tvar matchStr = match[0];\r\n\t\t\t\t\tvar before = str.slice(0, from);\r\n\t\t\t\t\tvar after = str.slice(from + matchStr.length);\r\n\r\n\t\t\t\t\tvar reach = pos + str.length;\r\n\t\t\t\t\tif (rematch && reach > rematch.reach) {\r\n\t\t\t\t\t\trematch.reach = reach;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar removeFrom = currentNode.prev;\r\n\r\n\t\t\t\t\tif (before) {\r\n\t\t\t\t\t\tremoveFrom = addAfter(tokenList, removeFrom, before);\r\n\t\t\t\t\t\tpos += before.length;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tremoveRange(tokenList, removeFrom, removeCount);\r\n\r\n\t\t\t\t\tvar wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);\r\n\t\t\t\t\tcurrentNode = addAfter(tokenList, removeFrom, wrapped);\r\n\r\n\t\t\t\t\tif (after) {\r\n\t\t\t\t\t\taddAfter(tokenList, currentNode, after);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (removeCount > 1) {\r\n\t\t\t\t\t\t// at least one Token object was removed, so we have to do some rematching\r\n\t\t\t\t\t\t// this can only happen if the current pattern is greedy\r\n\r\n\t\t\t\t\t\t/** @type {RematchOptions} */\r\n\t\t\t\t\t\tvar nestedRematch = {\r\n\t\t\t\t\t\t\tcause: token + ',' + j,\r\n\t\t\t\t\t\t\treach: reach\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tmatchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);\r\n\r\n\t\t\t\t\t\t// the reach might have been extended because of the rematching\r\n\t\t\t\t\t\tif (rematch && nestedRematch.reach > rematch.reach) {\r\n\t\t\t\t\t\t\trematch.reach = nestedRematch.reach;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @typedef LinkedListNode\r\n\t * @property {T} value\r\n\t * @property {LinkedListNode<T> | null} prev The previous node.\r\n\t * @property {LinkedListNode<T> | null} next The next node.\r\n\t * @template T\r\n\t * @private\r\n\t */\r\n\r\n\t/**\r\n\t * @template T\r\n\t * @private\r\n\t */\r\n\tfunction LinkedList() {\r\n\t\t/** @type {LinkedListNode<T>} */\r\n\t\tvar head = { value: null, prev: null, next: null };\r\n\t\t/** @type {LinkedListNode<T>} */\r\n\t\tvar tail = { value: null, prev: head, next: null };\r\n\t\thead.next = tail;\r\n\r\n\t\t/** @type {LinkedListNode<T>} */\r\n\t\tthis.head = head;\r\n\t\t/** @type {LinkedListNode<T>} */\r\n\t\tthis.tail = tail;\r\n\t\tthis.length = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a new node with the given value to the list.\r\n\t *\r\n\t * @param {LinkedList<T>} list\r\n\t * @param {LinkedListNode<T>} node\r\n\t * @param {T} value\r\n\t * @returns {LinkedListNode<T>} The added node.\r\n\t * @template T\r\n\t */\r\n\tfunction addAfter(list, node, value) {\r\n\t\t// assumes that node != list.tail && values.length >= 0\r\n\t\tvar next = node.next;\r\n\r\n\t\tvar newNode = { value: value, prev: node, next: next };\r\n\t\tnode.next = newNode;\r\n\t\tnext.prev = newNode;\r\n\t\tlist.length++;\r\n\r\n\t\treturn newNode;\r\n\t}\r\n\t/**\r\n\t * Removes `count` nodes after the given node. The given node will not be removed.\r\n\t *\r\n\t * @param {LinkedList<T>} list\r\n\t * @param {LinkedListNode<T>} node\r\n\t * @param {number} count\r\n\t * @template T\r\n\t */\r\n\tfunction removeRange(list, node, count) {\r\n\t\tvar next = node.next;\r\n\t\tfor (var i = 0; i < count && next !== list.tail; i++) {\r\n\t\t\tnext = next.next;\r\n\t\t}\r\n\t\tnode.next = next;\r\n\t\tnext.prev = node;\r\n\t\tlist.length -= i;\r\n\t}\r\n\t/**\r\n\t * @param {LinkedList<T>} list\r\n\t * @returns {T[]}\r\n\t * @template T\r\n\t */\r\n\tfunction toArray(list) {\r\n\t\tvar array = [];\r\n\t\tvar node = list.head.next;\r\n\t\twhile (node !== list.tail) {\r\n\t\t\tarray.push(node.value);\r\n\t\t\tnode = node.next;\r\n\t\t}\r\n\t\treturn array;\r\n\t}\r\n\r\n\r\n\tif (!_self.document) {\r\n\t\tif (!_self.addEventListener) {\r\n\t\t\t// in Node.js\r\n\t\t\treturn _;\r\n\t\t}\r\n\r\n\t\tif (!_.disableWorkerMessageHandler) {\r\n\t\t\t// In worker\r\n\t\t\t_self.addEventListener('message', function (evt) {\r\n\t\t\t\tvar message = JSON.parse(evt.data);\r\n\t\t\t\tvar lang = message.language;\r\n\t\t\t\tvar code = message.code;\r\n\t\t\t\tvar immediateClose = message.immediateClose;\r\n\r\n\t\t\t\t_self.postMessage(_.highlight(code, _.languages[lang], lang));\r\n\t\t\t\tif (immediateClose) {\r\n\t\t\t\t\t_self.close();\r\n\t\t\t\t}\r\n\t\t\t}, false);\r\n\t\t}\r\n\r\n\t\treturn _;\r\n\t}\r\n\r\n\t// Get current script and highlight\r\n\tvar script = _.util.currentScript();\r\n\r\n\tif (script) {\r\n\t\t_.filename = script.src;\r\n\r\n\t\tif (script.hasAttribute('data-manual')) {\r\n\t\t\t_.manual = true;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction highlightAutomaticallyCallback() {\r\n\t\tif (!_.manual) {\r\n\t\t\t_.highlightAll();\r\n\t\t}\r\n\t}\r\n\r\n\tif (!_.manual) {\r\n\t\t// If the document state is \"loading\", then we'll use DOMContentLoaded.\r\n\t\t// If the document state is \"interactive\" and the prism.js script is deferred, then we'll also use the\r\n\t\t// DOMContentLoaded event because there might be some plugins or languages which have also been deferred and they\r\n\t\t// might take longer one animation frame to execute which can create a race condition where only some plugins have\r\n\t\t// been loaded when Prism.highlightAll() is executed, depending on how fast resources are loaded.\r\n\t\t// See https://github.com/PrismJS/prism/issues/2102\r\n\t\tvar readyState = document.readyState;\r\n\t\tif (readyState === 'loading' || readyState === 'interactive' && script && script.defer) {\r\n\t\t\tdocument.addEventListener('DOMContentLoaded', highlightAutomaticallyCallback);\r\n\t\t} else {\r\n\t\t\tif (window.requestAnimationFrame) {\r\n\t\t\t\twindow.requestAnimationFrame(highlightAutomaticallyCallback);\r\n\t\t\t} else {\r\n\t\t\t\twindow.setTimeout(highlightAutomaticallyCallback, 16);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn _;\r\n\r\n}(_self));\r\n\r\nif (typeof module !== 'undefined' && module.exports) {\r\n\tmodule.exports = Prism;\r\n}\r\n\r\n// hack for components to work correctly in node.js\r\nif (typeof global !== 'undefined') {\r\n\tglobal.Prism = Prism;\r\n}\r\n\r\n// some additional documentation/types\r\n\r\n/**\r\n * The expansion of a simple `RegExp` literal to support additional properties.\r\n *\r\n * @typedef GrammarToken\r\n * @property {RegExp} pattern The regular expression of the token.\r\n * @property {boolean} [lookbehind=false] If `true`, then the first capturing group of `pattern` will (effectively)\r\n * behave as a lookbehind group meaning that the captured text will not be part of the matched text of the new token.\r\n * @property {boolean} [greedy=false] Whether the token is greedy.\r\n * @property {string|string[]} [alias] An optional alias or list of aliases.\r\n * @property {Grammar} [inside] The nested grammar of this token.\r\n *\r\n * The `inside` grammar will be used to tokenize the text value of each token of this kind.\r\n *\r\n * This can be used to make nested and even recursive language definitions.\r\n *\r\n * Note: This can cause infinite recursion. Be careful when you embed different languages or even the same language into\r\n * each another.\r\n * @global\r\n * @public\r\n */\r\n\r\n/**\r\n * @typedef Grammar\r\n * @type {Object<string, RegExp | GrammarToken | Array<RegExp | GrammarToken>>}\r\n * @property {Grammar} [rest] An optional grammar object that will be appended to this grammar.\r\n * @global\r\n * @public\r\n */\r\n\r\n/**\r\n * A function which will invoked after an element was successfully highlighted.\r\n *\r\n * @callback HighlightCallback\r\n * @param {Element} element The element successfully highlighted.\r\n * @returns {void}\r\n * @global\r\n * @public\r\n */\r\n\r\n/**\r\n * @callback HookCallback\r\n * @param {Object<string, any>} env The environment variables of the hook.\r\n * @returns {void}\r\n * @global\r\n * @public\r\n */\r\n"]},"metadata":{},"sourceType":"script"}