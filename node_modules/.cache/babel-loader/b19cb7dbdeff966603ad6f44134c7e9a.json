{"ast":null,"code":"'use strict';\n\nmodule.exports = agda;\nagda.displayName = 'agda';\nagda.aliases = [];\n\nfunction agda(Prism) {\n  ;\n\n  (function (Prism) {\n    Prism.languages.agda = {\n      comment: /\\{-[\\s\\S]*?(?:-\\}|$)|--.*/,\n      string: {\n        pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n        greedy: true\n      },\n      punctuation: /[(){}⦃⦄.;@]/,\n      'class-name': {\n        pattern: /((?:data|record) +)\\S+/,\n        lookbehind: true\n      },\n      function: {\n        pattern: /(^[ \\t]*)(?!\\s)[^:\\r\\n]+(?=:)/m,\n        lookbehind: true\n      },\n      operator: {\n        pattern: /(^\\s*|\\s)(?:[=|:∀→λ\\\\?_]|->)(?=\\s)/,\n        lookbehind: true\n      },\n      keyword: /\\b(?:Set|abstract|constructor|data|eta-equality|field|forall|hiding|import|in|inductive|infix|infixl|infixr|instance|let|macro|module|mutual|no-eta-equality|open|overlap|pattern|postulate|primitive|private|public|quote|quoteContext|quoteGoal|quoteTerm|record|renaming|rewrite|syntax|tactic|unquote|unquoteDecl|unquoteDef|using|variable|where|with)\\b/\n    };\n  })(Prism);\n}","map":{"version":3,"sources":["D:/Rnd/sleepyowl/node_modules/refractor/lang/agda.js"],"names":["module","exports","agda","displayName","aliases","Prism","languages","comment","string","pattern","greedy","punctuation","lookbehind","function","operator","keyword"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,IAAjB;AACAA,IAAI,CAACC,WAAL,GAAmB,MAAnB;AACAD,IAAI,CAACE,OAAL,GAAe,EAAf;;AACA,SAASF,IAAT,CAAcG,KAAd,EAAqB;AACnB;;AAAC,GAAC,UAAUA,KAAV,EAAiB;AACjBA,IAAAA,KAAK,CAACC,SAAN,CAAgBJ,IAAhB,GAAuB;AACrBK,MAAAA,OAAO,EAAE,2BADY;AAErBC,MAAAA,MAAM,EAAE;AACNC,QAAAA,OAAO,EAAE,qCADH;AAENC,QAAAA,MAAM,EAAE;AAFF,OAFa;AAMrBC,MAAAA,WAAW,EAAE,aANQ;AAOrB,oBAAc;AACZF,QAAAA,OAAO,EAAE,wBADG;AAEZG,QAAAA,UAAU,EAAE;AAFA,OAPO;AAWrBC,MAAAA,QAAQ,EAAE;AACRJ,QAAAA,OAAO,EAAE,gCADD;AAERG,QAAAA,UAAU,EAAE;AAFJ,OAXW;AAerBE,MAAAA,QAAQ,EAAE;AACRL,QAAAA,OAAO,EAAE,oCADD;AAERG,QAAAA,UAAU,EAAE;AAFJ,OAfW;AAmBrBG,MAAAA,OAAO,EACL;AApBmB,KAAvB;AAsBD,GAvBA,EAuBEV,KAvBF;AAwBF","sourcesContent":["'use strict'\r\n\r\nmodule.exports = agda\r\nagda.displayName = 'agda'\r\nagda.aliases = []\r\nfunction agda(Prism) {\r\n  ;(function (Prism) {\r\n    Prism.languages.agda = {\r\n      comment: /\\{-[\\s\\S]*?(?:-\\}|$)|--.*/,\r\n      string: {\r\n        pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\r\n        greedy: true\r\n      },\r\n      punctuation: /[(){}⦃⦄.;@]/,\r\n      'class-name': {\r\n        pattern: /((?:data|record) +)\\S+/,\r\n        lookbehind: true\r\n      },\r\n      function: {\r\n        pattern: /(^[ \\t]*)(?!\\s)[^:\\r\\n]+(?=:)/m,\r\n        lookbehind: true\r\n      },\r\n      operator: {\r\n        pattern: /(^\\s*|\\s)(?:[=|:∀→λ\\\\?_]|->)(?=\\s)/,\r\n        lookbehind: true\r\n      },\r\n      keyword:\r\n        /\\b(?:Set|abstract|constructor|data|eta-equality|field|forall|hiding|import|in|inductive|infix|infixl|infixr|instance|let|macro|module|mutual|no-eta-equality|open|overlap|pattern|postulate|primitive|private|public|quote|quoteContext|quoteGoal|quoteTerm|record|renaming|rewrite|syntax|tactic|unquote|unquoteDecl|unquoteDef|using|variable|where|with)\\b/\r\n    }\r\n  })(Prism)\r\n}\r\n"]},"metadata":{},"sourceType":"script"}