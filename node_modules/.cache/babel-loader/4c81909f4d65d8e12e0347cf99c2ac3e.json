{"ast":null,"code":"'use strict';\n\nmodule.exports = docker;\ndocker.displayName = 'docker';\ndocker.aliases = ['dockerfile'];\n\nfunction docker(Prism) {\n  ;\n\n  (function (Prism) {\n    // Many of the following regexes will contain negated lookaheads like `[ \\t]+(?![ \\t])`. This is a trick to ensure\n    // that quantifiers behave *atomically*. Atomic quantifiers are necessary to prevent exponential backtracking.\n    var spaceAfterBackSlash = /\\\\[\\r\\n](?:\\s|\\\\[\\r\\n]|#.*(?!.))*(?![\\s#]|\\\\[\\r\\n])/.source; // At least one space, comment, or line break\n\n    var space = /(?:[ \\t]+(?![ \\t])(?:<SP_BS>)?|<SP_BS>)/.source.replace(/<SP_BS>/g, function () {\n      return spaceAfterBackSlash;\n    });\n    var string = /\"(?:[^\"\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"|'(?:[^'\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*'/.source;\n    var option = /--[\\w-]+=(?:<STR>|(?![\"'])(?:[^\\s\\\\]|\\\\.)+)/.source.replace(/<STR>/g, function () {\n      return string;\n    });\n    var stringRule = {\n      pattern: RegExp(string),\n      greedy: true\n    };\n    var commentRule = {\n      pattern: /(^[ \\t]*)#.*/m,\n      lookbehind: true,\n      greedy: true\n    };\n    /**\r\n     * @param {string} source\r\n     * @param {string} flags\r\n     * @returns {RegExp}\r\n     */\n\n    function re(source, flags) {\n      source = source.replace(/<OPT>/g, function () {\n        return option;\n      }).replace(/<SP>/g, function () {\n        return space;\n      });\n      return RegExp(source, flags);\n    }\n\n    Prism.languages.docker = {\n      instruction: {\n        pattern: /(^[ \\t]*)(?:ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|FROM|HEALTHCHECK|LABEL|MAINTAINER|ONBUILD|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR)(?=\\s)(?:\\\\.|[^\\r\\n\\\\])*(?:\\\\$(?:\\s|#.*$)*(?![\\s#])(?:\\\\.|[^\\r\\n\\\\])*)*/im,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          options: {\n            pattern: re(/(^(?:ONBUILD<SP>)?\\w+<SP>)<OPT>(?:<SP><OPT>)*/.source, 'i'),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n              property: {\n                pattern: /(^|\\s)--[\\w-]+/,\n                lookbehind: true\n              },\n              string: [stringRule, {\n                pattern: /(=)(?![\"'])(?:[^\\s\\\\]|\\\\.)+/,\n                lookbehind: true\n              }],\n              operator: /\\\\$/m,\n              punctuation: /=/\n            }\n          },\n          keyword: [{\n            // https://docs.docker.com/engine/reference/builder/#healthcheck\n            pattern: re(/(^(?:ONBUILD<SP>)?HEALTHCHECK<SP>(?:<OPT><SP>)*)(?:CMD|NONE)\\b/.source, 'i'),\n            lookbehind: true,\n            greedy: true\n          }, {\n            // https://docs.docker.com/engine/reference/builder/#from\n            pattern: re(/(^(?:ONBUILD<SP>)?FROM<SP>(?:<OPT><SP>)*(?!--)[^ \\t\\\\]+<SP>)AS/.source, 'i'),\n            lookbehind: true,\n            greedy: true\n          }, {\n            // https://docs.docker.com/engine/reference/builder/#onbuild\n            pattern: re(/(^ONBUILD<SP>)\\w+/.source, 'i'),\n            lookbehind: true,\n            greedy: true\n          }, {\n            pattern: /^\\w+/,\n            greedy: true\n          }],\n          comment: commentRule,\n          string: stringRule,\n          variable: /\\$(?:\\w+|\\{[^{}\"'\\\\]*\\})/,\n          operator: /\\\\$/m\n        }\n      },\n      comment: commentRule\n    };\n    Prism.languages.dockerfile = Prism.languages.docker;\n  })(Prism);\n}","map":{"version":3,"sources":["D:/Rnd/sleepyowl/node_modules/refractor/lang/docker.js"],"names":["module","exports","docker","displayName","aliases","Prism","spaceAfterBackSlash","source","space","replace","string","option","stringRule","pattern","RegExp","greedy","commentRule","lookbehind","re","flags","languages","instruction","inside","options","property","operator","punctuation","keyword","comment","variable","dockerfile"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nmodule.exports = docker\r\ndocker.displayName = 'docker'\r\ndocker.aliases = ['dockerfile']\r\nfunction docker(Prism) {\r\n  ;(function (Prism) {\r\n    // Many of the following regexes will contain negated lookaheads like `[ \\t]+(?![ \\t])`. This is a trick to ensure\r\n    // that quantifiers behave *atomically*. Atomic quantifiers are necessary to prevent exponential backtracking.\r\n    var spaceAfterBackSlash =\r\n      /\\\\[\\r\\n](?:\\s|\\\\[\\r\\n]|#.*(?!.))*(?![\\s#]|\\\\[\\r\\n])/.source // At least one space, comment, or line break\r\n    var space = /(?:[ \\t]+(?![ \\t])(?:<SP_BS>)?|<SP_BS>)/.source.replace(\r\n      /<SP_BS>/g,\r\n      function () {\r\n        return spaceAfterBackSlash\r\n      }\r\n    )\r\n    var string =\r\n      /\"(?:[^\"\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"|'(?:[^'\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*'/\r\n        .source\r\n    var option = /--[\\w-]+=(?:<STR>|(?![\"'])(?:[^\\s\\\\]|\\\\.)+)/.source.replace(\r\n      /<STR>/g,\r\n      function () {\r\n        return string\r\n      }\r\n    )\r\n    var stringRule = {\r\n      pattern: RegExp(string),\r\n      greedy: true\r\n    }\r\n    var commentRule = {\r\n      pattern: /(^[ \\t]*)#.*/m,\r\n      lookbehind: true,\r\n      greedy: true\r\n    }\r\n    /**\r\n     * @param {string} source\r\n     * @param {string} flags\r\n     * @returns {RegExp}\r\n     */\r\n    function re(source, flags) {\r\n      source = source\r\n        .replace(/<OPT>/g, function () {\r\n          return option\r\n        })\r\n        .replace(/<SP>/g, function () {\r\n          return space\r\n        })\r\n      return RegExp(source, flags)\r\n    }\r\n    Prism.languages.docker = {\r\n      instruction: {\r\n        pattern:\r\n          /(^[ \\t]*)(?:ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|FROM|HEALTHCHECK|LABEL|MAINTAINER|ONBUILD|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR)(?=\\s)(?:\\\\.|[^\\r\\n\\\\])*(?:\\\\$(?:\\s|#.*$)*(?![\\s#])(?:\\\\.|[^\\r\\n\\\\])*)*/im,\r\n        lookbehind: true,\r\n        greedy: true,\r\n        inside: {\r\n          options: {\r\n            pattern: re(\r\n              /(^(?:ONBUILD<SP>)?\\w+<SP>)<OPT>(?:<SP><OPT>)*/.source,\r\n              'i'\r\n            ),\r\n            lookbehind: true,\r\n            greedy: true,\r\n            inside: {\r\n              property: {\r\n                pattern: /(^|\\s)--[\\w-]+/,\r\n                lookbehind: true\r\n              },\r\n              string: [\r\n                stringRule,\r\n                {\r\n                  pattern: /(=)(?![\"'])(?:[^\\s\\\\]|\\\\.)+/,\r\n                  lookbehind: true\r\n                }\r\n              ],\r\n              operator: /\\\\$/m,\r\n              punctuation: /=/\r\n            }\r\n          },\r\n          keyword: [\r\n            {\r\n              // https://docs.docker.com/engine/reference/builder/#healthcheck\r\n              pattern: re(\r\n                /(^(?:ONBUILD<SP>)?HEALTHCHECK<SP>(?:<OPT><SP>)*)(?:CMD|NONE)\\b/\r\n                  .source,\r\n                'i'\r\n              ),\r\n              lookbehind: true,\r\n              greedy: true\r\n            },\r\n            {\r\n              // https://docs.docker.com/engine/reference/builder/#from\r\n              pattern: re(\r\n                /(^(?:ONBUILD<SP>)?FROM<SP>(?:<OPT><SP>)*(?!--)[^ \\t\\\\]+<SP>)AS/\r\n                  .source,\r\n                'i'\r\n              ),\r\n              lookbehind: true,\r\n              greedy: true\r\n            },\r\n            {\r\n              // https://docs.docker.com/engine/reference/builder/#onbuild\r\n              pattern: re(/(^ONBUILD<SP>)\\w+/.source, 'i'),\r\n              lookbehind: true,\r\n              greedy: true\r\n            },\r\n            {\r\n              pattern: /^\\w+/,\r\n              greedy: true\r\n            }\r\n          ],\r\n          comment: commentRule,\r\n          string: stringRule,\r\n          variable: /\\$(?:\\w+|\\{[^{}\"'\\\\]*\\})/,\r\n          operator: /\\\\$/m\r\n        }\r\n      },\r\n      comment: commentRule\r\n    }\r\n    Prism.languages.dockerfile = Prism.languages.docker\r\n  })(Prism)\r\n}\r\n"]},"metadata":{},"sourceType":"script"}