{"ast":null,"code":"'use strict';\n\nmodule.exports = mongodb;\nmongodb.displayName = 'mongodb';\nmongodb.aliases = [];\n\nfunction mongodb(Prism) {\n  ;\n\n  (function (Prism) {\n    var operators = [// query and projection\n    '$eq', '$gt', '$gte', '$in', '$lt', '$lte', '$ne', '$nin', '$and', '$not', '$nor', '$or', '$exists', '$type', '$expr', '$jsonSchema', '$mod', '$regex', '$text', '$where', '$geoIntersects', '$geoWithin', '$near', '$nearSphere', '$all', '$elemMatch', '$size', '$bitsAllClear', '$bitsAllSet', '$bitsAnyClear', '$bitsAnySet', '$comment', '$elemMatch', '$meta', '$slice', // update\n    '$currentDate', '$inc', '$min', '$max', '$mul', '$rename', '$set', '$setOnInsert', '$unset', '$addToSet', '$pop', '$pull', '$push', '$pullAll', '$each', '$position', '$slice', '$sort', '$bit', // aggregation pipeline stages\n    '$addFields', '$bucket', '$bucketAuto', '$collStats', '$count', '$currentOp', '$facet', '$geoNear', '$graphLookup', '$group', '$indexStats', '$limit', '$listLocalSessions', '$listSessions', '$lookup', '$match', '$merge', '$out', '$planCacheStats', '$project', '$redact', '$replaceRoot', '$replaceWith', '$sample', '$set', '$skip', '$sort', '$sortByCount', '$unionWith', '$unset', '$unwind', // aggregation pipeline operators\n    '$abs', '$accumulator', '$acos', '$acosh', '$add', '$addToSet', '$allElementsTrue', '$and', '$anyElementTrue', '$arrayElemAt', '$arrayToObject', '$asin', '$asinh', '$atan', '$atan2', '$atanh', '$avg', '$binarySize', '$bsonSize', '$ceil', '$cmp', '$concat', '$concatArrays', '$cond', '$convert', '$cos', '$dateFromParts', '$dateToParts', '$dateFromString', '$dateToString', '$dayOfMonth', '$dayOfWeek', '$dayOfYear', '$degreesToRadians', '$divide', '$eq', '$exp', '$filter', '$first', '$floor', '$function', '$gt', '$gte', '$hour', '$ifNull', '$in', '$indexOfArray', '$indexOfBytes', '$indexOfCP', '$isArray', '$isNumber', '$isoDayOfWeek', '$isoWeek', '$isoWeekYear', '$last', '$last', '$let', '$literal', '$ln', '$log', '$log10', '$lt', '$lte', '$ltrim', '$map', '$max', '$mergeObjects', '$meta', '$min', '$millisecond', '$minute', '$mod', '$month', '$multiply', '$ne', '$not', '$objectToArray', '$or', '$pow', '$push', '$radiansToDegrees', '$range', '$reduce', '$regexFind', '$regexFindAll', '$regexMatch', '$replaceOne', '$replaceAll', '$reverseArray', '$round', '$rtrim', '$second', '$setDifference', '$setEquals', '$setIntersection', '$setIsSubset', '$setUnion', '$size', '$sin', '$slice', '$split', '$sqrt', '$stdDevPop', '$stdDevSamp', '$strcasecmp', '$strLenBytes', '$strLenCP', '$substr', '$substrBytes', '$substrCP', '$subtract', '$sum', '$switch', '$tan', '$toBool', '$toDate', '$toDecimal', '$toDouble', '$toInt', '$toLong', '$toObjectId', '$toString', '$toLower', '$toUpper', '$trim', '$trunc', '$type', '$week', '$year', '$zip', // aggregation pipeline query modifiers\n    '$comment', '$explain', '$hint', '$max', '$maxTimeMS', '$min', '$orderby', '$query', '$returnKey', '$showDiskLoc', '$natural'];\n    var builtinFunctions = ['ObjectId', 'Code', 'BinData', 'DBRef', 'Timestamp', 'NumberLong', 'NumberDecimal', 'MaxKey', 'MinKey', 'RegExp', 'ISODate', 'UUID'];\n    operators = operators.map(function (operator) {\n      return operator.replace('$', '\\\\$');\n    });\n    var operatorsSource = '(?:' + operators.join('|') + ')\\\\b';\n    Prism.languages.mongodb = Prism.languages.extend('javascript', {});\n    Prism.languages.insertBefore('mongodb', 'string', {\n      property: {\n        pattern: /(?:([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)(?=\\s*:)/,\n        greedy: true,\n        inside: {\n          keyword: RegExp('^([\\'\"])?' + operatorsSource + '(?:\\\\1)?$')\n        }\n      }\n    });\n    Prism.languages.mongodb.string.inside = {\n      url: {\n        // url pattern\n        pattern: /https?:\\/\\/[-\\w@:%.+~#=]{1,256}\\.[a-z0-9()]{1,6}\\b[-\\w()@:%+.~#?&/=]*/i,\n        greedy: true\n      },\n      entity: {\n        // ipv4\n        pattern: /\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b/,\n        greedy: true\n      }\n    };\n    Prism.languages.insertBefore('mongodb', 'constant', {\n      builtin: {\n        pattern: RegExp('\\\\b(?:' + builtinFunctions.join('|') + ')\\\\b'),\n        alias: 'keyword'\n      }\n    });\n  })(Prism);\n}","map":{"version":3,"sources":["D:/Rnd/sleepyowl/node_modules/refractor/lang/mongodb.js"],"names":["module","exports","mongodb","displayName","aliases","Prism","operators","builtinFunctions","map","operator","replace","operatorsSource","join","languages","extend","insertBefore","property","pattern","greedy","inside","keyword","RegExp","string","url","entity","builtin","alias"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nmodule.exports = mongodb\r\nmongodb.displayName = 'mongodb'\r\nmongodb.aliases = []\r\nfunction mongodb(Prism) {\r\n  ;(function (Prism) {\r\n    var operators = [\r\n      // query and projection\r\n      '$eq',\r\n      '$gt',\r\n      '$gte',\r\n      '$in',\r\n      '$lt',\r\n      '$lte',\r\n      '$ne',\r\n      '$nin',\r\n      '$and',\r\n      '$not',\r\n      '$nor',\r\n      '$or',\r\n      '$exists',\r\n      '$type',\r\n      '$expr',\r\n      '$jsonSchema',\r\n      '$mod',\r\n      '$regex',\r\n      '$text',\r\n      '$where',\r\n      '$geoIntersects',\r\n      '$geoWithin',\r\n      '$near',\r\n      '$nearSphere',\r\n      '$all',\r\n      '$elemMatch',\r\n      '$size',\r\n      '$bitsAllClear',\r\n      '$bitsAllSet',\r\n      '$bitsAnyClear',\r\n      '$bitsAnySet',\r\n      '$comment',\r\n      '$elemMatch',\r\n      '$meta',\r\n      '$slice', // update\r\n      '$currentDate',\r\n      '$inc',\r\n      '$min',\r\n      '$max',\r\n      '$mul',\r\n      '$rename',\r\n      '$set',\r\n      '$setOnInsert',\r\n      '$unset',\r\n      '$addToSet',\r\n      '$pop',\r\n      '$pull',\r\n      '$push',\r\n      '$pullAll',\r\n      '$each',\r\n      '$position',\r\n      '$slice',\r\n      '$sort',\r\n      '$bit', // aggregation pipeline stages\r\n      '$addFields',\r\n      '$bucket',\r\n      '$bucketAuto',\r\n      '$collStats',\r\n      '$count',\r\n      '$currentOp',\r\n      '$facet',\r\n      '$geoNear',\r\n      '$graphLookup',\r\n      '$group',\r\n      '$indexStats',\r\n      '$limit',\r\n      '$listLocalSessions',\r\n      '$listSessions',\r\n      '$lookup',\r\n      '$match',\r\n      '$merge',\r\n      '$out',\r\n      '$planCacheStats',\r\n      '$project',\r\n      '$redact',\r\n      '$replaceRoot',\r\n      '$replaceWith',\r\n      '$sample',\r\n      '$set',\r\n      '$skip',\r\n      '$sort',\r\n      '$sortByCount',\r\n      '$unionWith',\r\n      '$unset',\r\n      '$unwind', // aggregation pipeline operators\r\n      '$abs',\r\n      '$accumulator',\r\n      '$acos',\r\n      '$acosh',\r\n      '$add',\r\n      '$addToSet',\r\n      '$allElementsTrue',\r\n      '$and',\r\n      '$anyElementTrue',\r\n      '$arrayElemAt',\r\n      '$arrayToObject',\r\n      '$asin',\r\n      '$asinh',\r\n      '$atan',\r\n      '$atan2',\r\n      '$atanh',\r\n      '$avg',\r\n      '$binarySize',\r\n      '$bsonSize',\r\n      '$ceil',\r\n      '$cmp',\r\n      '$concat',\r\n      '$concatArrays',\r\n      '$cond',\r\n      '$convert',\r\n      '$cos',\r\n      '$dateFromParts',\r\n      '$dateToParts',\r\n      '$dateFromString',\r\n      '$dateToString',\r\n      '$dayOfMonth',\r\n      '$dayOfWeek',\r\n      '$dayOfYear',\r\n      '$degreesToRadians',\r\n      '$divide',\r\n      '$eq',\r\n      '$exp',\r\n      '$filter',\r\n      '$first',\r\n      '$floor',\r\n      '$function',\r\n      '$gt',\r\n      '$gte',\r\n      '$hour',\r\n      '$ifNull',\r\n      '$in',\r\n      '$indexOfArray',\r\n      '$indexOfBytes',\r\n      '$indexOfCP',\r\n      '$isArray',\r\n      '$isNumber',\r\n      '$isoDayOfWeek',\r\n      '$isoWeek',\r\n      '$isoWeekYear',\r\n      '$last',\r\n      '$last',\r\n      '$let',\r\n      '$literal',\r\n      '$ln',\r\n      '$log',\r\n      '$log10',\r\n      '$lt',\r\n      '$lte',\r\n      '$ltrim',\r\n      '$map',\r\n      '$max',\r\n      '$mergeObjects',\r\n      '$meta',\r\n      '$min',\r\n      '$millisecond',\r\n      '$minute',\r\n      '$mod',\r\n      '$month',\r\n      '$multiply',\r\n      '$ne',\r\n      '$not',\r\n      '$objectToArray',\r\n      '$or',\r\n      '$pow',\r\n      '$push',\r\n      '$radiansToDegrees',\r\n      '$range',\r\n      '$reduce',\r\n      '$regexFind',\r\n      '$regexFindAll',\r\n      '$regexMatch',\r\n      '$replaceOne',\r\n      '$replaceAll',\r\n      '$reverseArray',\r\n      '$round',\r\n      '$rtrim',\r\n      '$second',\r\n      '$setDifference',\r\n      '$setEquals',\r\n      '$setIntersection',\r\n      '$setIsSubset',\r\n      '$setUnion',\r\n      '$size',\r\n      '$sin',\r\n      '$slice',\r\n      '$split',\r\n      '$sqrt',\r\n      '$stdDevPop',\r\n      '$stdDevSamp',\r\n      '$strcasecmp',\r\n      '$strLenBytes',\r\n      '$strLenCP',\r\n      '$substr',\r\n      '$substrBytes',\r\n      '$substrCP',\r\n      '$subtract',\r\n      '$sum',\r\n      '$switch',\r\n      '$tan',\r\n      '$toBool',\r\n      '$toDate',\r\n      '$toDecimal',\r\n      '$toDouble',\r\n      '$toInt',\r\n      '$toLong',\r\n      '$toObjectId',\r\n      '$toString',\r\n      '$toLower',\r\n      '$toUpper',\r\n      '$trim',\r\n      '$trunc',\r\n      '$type',\r\n      '$week',\r\n      '$year',\r\n      '$zip', // aggregation pipeline query modifiers\r\n      '$comment',\r\n      '$explain',\r\n      '$hint',\r\n      '$max',\r\n      '$maxTimeMS',\r\n      '$min',\r\n      '$orderby',\r\n      '$query',\r\n      '$returnKey',\r\n      '$showDiskLoc',\r\n      '$natural'\r\n    ]\r\n    var builtinFunctions = [\r\n      'ObjectId',\r\n      'Code',\r\n      'BinData',\r\n      'DBRef',\r\n      'Timestamp',\r\n      'NumberLong',\r\n      'NumberDecimal',\r\n      'MaxKey',\r\n      'MinKey',\r\n      'RegExp',\r\n      'ISODate',\r\n      'UUID'\r\n    ]\r\n    operators = operators.map(function (operator) {\r\n      return operator.replace('$', '\\\\$')\r\n    })\r\n    var operatorsSource = '(?:' + operators.join('|') + ')\\\\b'\r\n    Prism.languages.mongodb = Prism.languages.extend('javascript', {})\r\n    Prism.languages.insertBefore('mongodb', 'string', {\r\n      property: {\r\n        pattern:\r\n          /(?:([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)(?=\\s*:)/,\r\n        greedy: true,\r\n        inside: {\r\n          keyword: RegExp('^([\\'\"])?' + operatorsSource + '(?:\\\\1)?$')\r\n        }\r\n      }\r\n    })\r\n    Prism.languages.mongodb.string.inside = {\r\n      url: {\r\n        // url pattern\r\n        pattern:\r\n          /https?:\\/\\/[-\\w@:%.+~#=]{1,256}\\.[a-z0-9()]{1,6}\\b[-\\w()@:%+.~#?&/=]*/i,\r\n        greedy: true\r\n      },\r\n      entity: {\r\n        // ipv4\r\n        pattern:\r\n          /\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b/,\r\n        greedy: true\r\n      }\r\n    }\r\n    Prism.languages.insertBefore('mongodb', 'constant', {\r\n      builtin: {\r\n        pattern: RegExp('\\\\b(?:' + builtinFunctions.join('|') + ')\\\\b'),\r\n        alias: 'keyword'\r\n      }\r\n    })\r\n  })(Prism)\r\n}\r\n"]},"metadata":{},"sourceType":"script"}