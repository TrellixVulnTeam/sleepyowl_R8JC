{"ast":null,"code":"'use strict';\n\nmodule.exports = abnf;\nabnf.displayName = 'abnf';\nabnf.aliases = [];\n\nfunction abnf(Prism) {\n  ;\n\n  (function (Prism) {\n    var coreRules = '(?:ALPHA|BIT|CHAR|CR|CRLF|CTL|DIGIT|DQUOTE|HEXDIG|HTAB|LF|LWSP|OCTET|SP|VCHAR|WSP)';\n    Prism.languages.abnf = {\n      comment: /;.*/,\n      string: {\n        pattern: /(?:%[is])?\"[^\"\\n\\r]*\"/,\n        greedy: true,\n        inside: {\n          punctuation: /^%[is]/\n        }\n      },\n      range: {\n        pattern: /%(?:b[01]+-[01]+|d\\d+-\\d+|x[A-F\\d]+-[A-F\\d]+)/i,\n        alias: 'number'\n      },\n      terminal: {\n        pattern: /%(?:b[01]+(?:\\.[01]+)*|d\\d+(?:\\.\\d+)*|x[A-F\\d]+(?:\\.[A-F\\d]+)*)/i,\n        alias: 'number'\n      },\n      repetition: {\n        pattern: /(^|[^\\w-])(?:\\d*\\*\\d*|\\d+)/,\n        lookbehind: true,\n        alias: 'operator'\n      },\n      definition: {\n        pattern: /(^[ \\t]*)(?:[a-z][\\w-]*|<[^<>\\r\\n]*>)(?=\\s*=)/m,\n        lookbehind: true,\n        alias: 'keyword',\n        inside: {\n          punctuation: /<|>/\n        }\n      },\n      'core-rule': {\n        pattern: RegExp('(?:(^|[^<\\\\w-])' + coreRules + '|<' + coreRules + '>)(?![\\\\w-])', 'i'),\n        lookbehind: true,\n        alias: ['rule', 'constant'],\n        inside: {\n          punctuation: /<|>/\n        }\n      },\n      rule: {\n        pattern: /(^|[^<\\w-])[a-z][\\w-]*|<[^<>\\r\\n]*>/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /<|>/\n        }\n      },\n      operator: /=\\/?|\\//,\n      punctuation: /[()\\[\\]]/\n    };\n  })(Prism);\n}","map":{"version":3,"sources":["D:/Rnd/sleepyowl/node_modules/refractor/lang/abnf.js"],"names":["module","exports","abnf","displayName","aliases","Prism","coreRules","languages","comment","string","pattern","greedy","inside","punctuation","range","alias","terminal","repetition","lookbehind","definition","RegExp","rule","operator"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,IAAjB;AACAA,IAAI,CAACC,WAAL,GAAmB,MAAnB;AACAD,IAAI,CAACE,OAAL,GAAe,EAAf;;AACA,SAASF,IAAT,CAAcG,KAAd,EAAqB;AACnB;;AAAC,GAAC,UAAUA,KAAV,EAAiB;AACjB,QAAIC,SAAS,GACX,oFADF;AAEAD,IAAAA,KAAK,CAACE,SAAN,CAAgBL,IAAhB,GAAuB;AACrBM,MAAAA,OAAO,EAAE,KADY;AAErBC,MAAAA,MAAM,EAAE;AACNC,QAAAA,OAAO,EAAE,uBADH;AAENC,QAAAA,MAAM,EAAE,IAFF;AAGNC,QAAAA,MAAM,EAAE;AACNC,UAAAA,WAAW,EAAE;AADP;AAHF,OAFa;AASrBC,MAAAA,KAAK,EAAE;AACLJ,QAAAA,OAAO,EAAE,gDADJ;AAELK,QAAAA,KAAK,EAAE;AAFF,OATc;AAarBC,MAAAA,QAAQ,EAAE;AACRN,QAAAA,OAAO,EACL,kEAFM;AAGRK,QAAAA,KAAK,EAAE;AAHC,OAbW;AAkBrBE,MAAAA,UAAU,EAAE;AACVP,QAAAA,OAAO,EAAE,4BADC;AAEVQ,QAAAA,UAAU,EAAE,IAFF;AAGVH,QAAAA,KAAK,EAAE;AAHG,OAlBS;AAuBrBI,MAAAA,UAAU,EAAE;AACVT,QAAAA,OAAO,EAAE,gDADC;AAEVQ,QAAAA,UAAU,EAAE,IAFF;AAGVH,QAAAA,KAAK,EAAE,SAHG;AAIVH,QAAAA,MAAM,EAAE;AACNC,UAAAA,WAAW,EAAE;AADP;AAJE,OAvBS;AA+BrB,mBAAa;AACXH,QAAAA,OAAO,EAAEU,MAAM,CACb,oBAAoBd,SAApB,GAAgC,IAAhC,GAAuCA,SAAvC,GAAmD,cADtC,EAEb,GAFa,CADJ;AAKXY,QAAAA,UAAU,EAAE,IALD;AAMXH,QAAAA,KAAK,EAAE,CAAC,MAAD,EAAS,UAAT,CANI;AAOXH,QAAAA,MAAM,EAAE;AACNC,UAAAA,WAAW,EAAE;AADP;AAPG,OA/BQ;AA0CrBQ,MAAAA,IAAI,EAAE;AACJX,QAAAA,OAAO,EAAE,sCADL;AAEJQ,QAAAA,UAAU,EAAE,IAFR;AAGJN,QAAAA,MAAM,EAAE;AACNC,UAAAA,WAAW,EAAE;AADP;AAHJ,OA1Ce;AAiDrBS,MAAAA,QAAQ,EAAE,SAjDW;AAkDrBT,MAAAA,WAAW,EAAE;AAlDQ,KAAvB;AAoDD,GAvDA,EAuDER,KAvDF;AAwDF","sourcesContent":["'use strict'\r\n\r\nmodule.exports = abnf\r\nabnf.displayName = 'abnf'\r\nabnf.aliases = []\r\nfunction abnf(Prism) {\r\n  ;(function (Prism) {\r\n    var coreRules =\r\n      '(?:ALPHA|BIT|CHAR|CR|CRLF|CTL|DIGIT|DQUOTE|HEXDIG|HTAB|LF|LWSP|OCTET|SP|VCHAR|WSP)'\r\n    Prism.languages.abnf = {\r\n      comment: /;.*/,\r\n      string: {\r\n        pattern: /(?:%[is])?\"[^\"\\n\\r]*\"/,\r\n        greedy: true,\r\n        inside: {\r\n          punctuation: /^%[is]/\r\n        }\r\n      },\r\n      range: {\r\n        pattern: /%(?:b[01]+-[01]+|d\\d+-\\d+|x[A-F\\d]+-[A-F\\d]+)/i,\r\n        alias: 'number'\r\n      },\r\n      terminal: {\r\n        pattern:\r\n          /%(?:b[01]+(?:\\.[01]+)*|d\\d+(?:\\.\\d+)*|x[A-F\\d]+(?:\\.[A-F\\d]+)*)/i,\r\n        alias: 'number'\r\n      },\r\n      repetition: {\r\n        pattern: /(^|[^\\w-])(?:\\d*\\*\\d*|\\d+)/,\r\n        lookbehind: true,\r\n        alias: 'operator'\r\n      },\r\n      definition: {\r\n        pattern: /(^[ \\t]*)(?:[a-z][\\w-]*|<[^<>\\r\\n]*>)(?=\\s*=)/m,\r\n        lookbehind: true,\r\n        alias: 'keyword',\r\n        inside: {\r\n          punctuation: /<|>/\r\n        }\r\n      },\r\n      'core-rule': {\r\n        pattern: RegExp(\r\n          '(?:(^|[^<\\\\w-])' + coreRules + '|<' + coreRules + '>)(?![\\\\w-])',\r\n          'i'\r\n        ),\r\n        lookbehind: true,\r\n        alias: ['rule', 'constant'],\r\n        inside: {\r\n          punctuation: /<|>/\r\n        }\r\n      },\r\n      rule: {\r\n        pattern: /(^|[^<\\w-])[a-z][\\w-]*|<[^<>\\r\\n]*>/i,\r\n        lookbehind: true,\r\n        inside: {\r\n          punctuation: /<|>/\r\n        }\r\n      },\r\n      operator: /=\\/?|\\//,\r\n      punctuation: /[()\\[\\]]/\r\n    }\r\n  })(Prism)\r\n}\r\n"]},"metadata":{},"sourceType":"script"}