{"ast":null,"code":"'use strict';\n\nmodule.exports = dhall;\ndhall.displayName = 'dhall';\ndhall.aliases = [];\n\nfunction dhall(Prism) {\n  // ABNF grammar:\n  // https://github.com/dhall-lang/dhall-lang/blob/master/standard/dhall.abnf\n  Prism.languages.dhall = {\n    // Multi-line comments can be nested. E.g. {- foo {- bar -} -}\n    // The multi-line pattern is essentially this:\n    //   \\{-(?:[^-{]|-(?!\\})|\\{(?!-)|<SELF>)*-\\}\n    comment: /--.*|\\{-(?:[^-{]|-(?!\\})|\\{(?!-)|\\{-(?:[^-{]|-(?!\\})|\\{(?!-))*-\\})*-\\}/,\n    string: {\n      pattern: /\"(?:[^\"\\\\]|\\\\.)*\"|''(?:[^']|'(?!')|'''|''\\$\\{)*''(?!'|\\$)/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /\\$\\{[^{}]*\\}/,\n          inside: {\n            expression: {\n              pattern: /(^\\$\\{)[\\s\\S]+(?=\\}$)/,\n              lookbehind: true,\n              alias: 'language-dhall',\n              inside: null // see blow\n\n            },\n            punctuation: /\\$\\{|\\}/\n          }\n        }\n      }\n    },\n    label: {\n      pattern: /`[^`]*`/,\n      greedy: true\n    },\n    url: {\n      // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L596\n      pattern: /\\bhttps?:\\/\\/[\\w.:%!$&'*+;=@~-]+(?:\\/[\\w.:%!$&'*+;=@~-]*)*(?:\\?[/?\\w.:%!$&'*+;=@~-]*)?/,\n      greedy: true\n    },\n    env: {\n      // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L661\n      pattern: /\\benv:(?:(?!\\d)\\w+|\"(?:[^\"\\\\=]|\\\\.)*\")/,\n      greedy: true,\n      inside: {\n        function: /^env/,\n        operator: /^:/,\n        variable: /[\\s\\S]+/\n      }\n    },\n    hash: {\n      // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L725\n      pattern: /\\bsha256:[\\da-fA-F]{64}\\b/,\n      inside: {\n        function: /sha256/,\n        operator: /:/,\n        number: /[\\da-fA-F]{64}/\n      }\n    },\n    // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L359\n    keyword: /\\b(?:as|assert|else|forall|if|in|let|merge|missing|then|toMap|using|with)\\b|\\u2200/,\n    builtin: /\\b(?:Some|None)\\b/,\n    boolean: /\\b(?:False|True)\\b/,\n    number: /\\bNaN\\b|-?\\bInfinity\\b|[+-]?\\b(?:0x[\\da-fA-F]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/,\n    operator: /\\/\\\\|\\/\\/\\\\\\\\|&&|\\|\\||===|[!=]=|\\/\\/|->|\\+\\+|::|[+*#@=:?<>|\\\\\\u2227\\u2a53\\u2261\\u2afd\\u03bb\\u2192]/,\n    punctuation: /\\.\\.|[{}\\[\\](),./]/,\n    // we'll just assume that every capital word left is a type name\n    'class-name': /\\b[A-Z]\\w*\\b/\n  };\n  Prism.languages.dhall.string.inside.interpolation.inside.expression.inside = Prism.languages.dhall;\n}","map":{"version":3,"sources":["D:/Rnd/sleepyowl/node_modules/refractor/lang/dhall.js"],"names":["module","exports","dhall","displayName","aliases","Prism","languages","comment","string","pattern","greedy","inside","interpolation","expression","lookbehind","alias","punctuation","label","url","env","function","operator","variable","hash","number","keyword","builtin","boolean"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,KAAjB;AACAA,KAAK,CAACC,WAAN,GAAoB,OAApB;AACAD,KAAK,CAACE,OAAN,GAAgB,EAAhB;;AACA,SAASF,KAAT,CAAeG,KAAf,EAAsB;AACpB;AACA;AACAA,EAAAA,KAAK,CAACC,SAAN,CAAgBJ,KAAhB,GAAwB;AACtB;AACA;AACA;AACAK,IAAAA,OAAO,EACL,wEALoB;AAMtBC,IAAAA,MAAM,EAAE;AACNC,MAAAA,OAAO,EAAE,2DADH;AAENC,MAAAA,MAAM,EAAE,IAFF;AAGNC,MAAAA,MAAM,EAAE;AACNC,QAAAA,aAAa,EAAE;AACbH,UAAAA,OAAO,EAAE,cADI;AAEbE,UAAAA,MAAM,EAAE;AACNE,YAAAA,UAAU,EAAE;AACVJ,cAAAA,OAAO,EAAE,uBADC;AAEVK,cAAAA,UAAU,EAAE,IAFF;AAGVC,cAAAA,KAAK,EAAE,gBAHG;AAIVJ,cAAAA,MAAM,EAAE,IAJE,CAIG;;AAJH,aADN;AAONK,YAAAA,WAAW,EAAE;AAPP;AAFK;AADT;AAHF,KANc;AAwBtBC,IAAAA,KAAK,EAAE;AACLR,MAAAA,OAAO,EAAE,SADJ;AAELC,MAAAA,MAAM,EAAE;AAFH,KAxBe;AA4BtBQ,IAAAA,GAAG,EAAE;AACH;AACAT,MAAAA,OAAO,EACL,wFAHC;AAIHC,MAAAA,MAAM,EAAE;AAJL,KA5BiB;AAkCtBS,IAAAA,GAAG,EAAE;AACH;AACAV,MAAAA,OAAO,EAAE,wCAFN;AAGHC,MAAAA,MAAM,EAAE,IAHL;AAIHC,MAAAA,MAAM,EAAE;AACNS,QAAAA,QAAQ,EAAE,MADJ;AAENC,QAAAA,QAAQ,EAAE,IAFJ;AAGNC,QAAAA,QAAQ,EAAE;AAHJ;AAJL,KAlCiB;AA4CtBC,IAAAA,IAAI,EAAE;AACJ;AACAd,MAAAA,OAAO,EAAE,2BAFL;AAGJE,MAAAA,MAAM,EAAE;AACNS,QAAAA,QAAQ,EAAE,QADJ;AAENC,QAAAA,QAAQ,EAAE,GAFJ;AAGNG,QAAAA,MAAM,EAAE;AAHF;AAHJ,KA5CgB;AAqDtB;AACAC,IAAAA,OAAO,EACL,oFAvDoB;AAwDtBC,IAAAA,OAAO,EAAE,mBAxDa;AAyDtBC,IAAAA,OAAO,EAAE,oBAzDa;AA0DtBH,IAAAA,MAAM,EACJ,+EA3DoB;AA4DtBH,IAAAA,QAAQ,EACN,oGA7DoB;AA8DtBL,IAAAA,WAAW,EAAE,oBA9DS;AA+DtB;AACA,kBAAc;AAhEQ,GAAxB;AAkEAX,EAAAA,KAAK,CAACC,SAAN,CAAgBJ,KAAhB,CAAsBM,MAAtB,CAA6BG,MAA7B,CAAoCC,aAApC,CAAkDD,MAAlD,CAAyDE,UAAzD,CAAoEF,MAApE,GACEN,KAAK,CAACC,SAAN,CAAgBJ,KADlB;AAED","sourcesContent":["'use strict'\r\n\r\nmodule.exports = dhall\r\ndhall.displayName = 'dhall'\r\ndhall.aliases = []\r\nfunction dhall(Prism) {\r\n  // ABNF grammar:\r\n  // https://github.com/dhall-lang/dhall-lang/blob/master/standard/dhall.abnf\r\n  Prism.languages.dhall = {\r\n    // Multi-line comments can be nested. E.g. {- foo {- bar -} -}\r\n    // The multi-line pattern is essentially this:\r\n    //   \\{-(?:[^-{]|-(?!\\})|\\{(?!-)|<SELF>)*-\\}\r\n    comment:\r\n      /--.*|\\{-(?:[^-{]|-(?!\\})|\\{(?!-)|\\{-(?:[^-{]|-(?!\\})|\\{(?!-))*-\\})*-\\}/,\r\n    string: {\r\n      pattern: /\"(?:[^\"\\\\]|\\\\.)*\"|''(?:[^']|'(?!')|'''|''\\$\\{)*''(?!'|\\$)/,\r\n      greedy: true,\r\n      inside: {\r\n        interpolation: {\r\n          pattern: /\\$\\{[^{}]*\\}/,\r\n          inside: {\r\n            expression: {\r\n              pattern: /(^\\$\\{)[\\s\\S]+(?=\\}$)/,\r\n              lookbehind: true,\r\n              alias: 'language-dhall',\r\n              inside: null // see blow\r\n            },\r\n            punctuation: /\\$\\{|\\}/\r\n          }\r\n        }\r\n      }\r\n    },\r\n    label: {\r\n      pattern: /`[^`]*`/,\r\n      greedy: true\r\n    },\r\n    url: {\r\n      // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L596\r\n      pattern:\r\n        /\\bhttps?:\\/\\/[\\w.:%!$&'*+;=@~-]+(?:\\/[\\w.:%!$&'*+;=@~-]*)*(?:\\?[/?\\w.:%!$&'*+;=@~-]*)?/,\r\n      greedy: true\r\n    },\r\n    env: {\r\n      // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L661\r\n      pattern: /\\benv:(?:(?!\\d)\\w+|\"(?:[^\"\\\\=]|\\\\.)*\")/,\r\n      greedy: true,\r\n      inside: {\r\n        function: /^env/,\r\n        operator: /^:/,\r\n        variable: /[\\s\\S]+/\r\n      }\r\n    },\r\n    hash: {\r\n      // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L725\r\n      pattern: /\\bsha256:[\\da-fA-F]{64}\\b/,\r\n      inside: {\r\n        function: /sha256/,\r\n        operator: /:/,\r\n        number: /[\\da-fA-F]{64}/\r\n      }\r\n    },\r\n    // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L359\r\n    keyword:\r\n      /\\b(?:as|assert|else|forall|if|in|let|merge|missing|then|toMap|using|with)\\b|\\u2200/,\r\n    builtin: /\\b(?:Some|None)\\b/,\r\n    boolean: /\\b(?:False|True)\\b/,\r\n    number:\r\n      /\\bNaN\\b|-?\\bInfinity\\b|[+-]?\\b(?:0x[\\da-fA-F]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/,\r\n    operator:\r\n      /\\/\\\\|\\/\\/\\\\\\\\|&&|\\|\\||===|[!=]=|\\/\\/|->|\\+\\+|::|[+*#@=:?<>|\\\\\\u2227\\u2a53\\u2261\\u2afd\\u03bb\\u2192]/,\r\n    punctuation: /\\.\\.|[{}\\[\\](),./]/,\r\n    // we'll just assume that every capital word left is a type name\r\n    'class-name': /\\b[A-Z]\\w*\\b/\r\n  }\r\n  Prism.languages.dhall.string.inside.interpolation.inside.expression.inside =\r\n    Prism.languages.dhall\r\n}\r\n"]},"metadata":{},"sourceType":"script"}