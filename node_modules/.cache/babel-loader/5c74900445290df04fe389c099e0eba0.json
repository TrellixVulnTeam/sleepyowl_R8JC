{"ast":null,"code":"'use strict';\n\nmodule.exports = systemd;\nsystemd.displayName = 'systemd';\nsystemd.aliases = [];\n\nfunction systemd(Prism) {\n  // https://www.freedesktop.org/software/systemd/man/systemd.syntax.html\n  ;\n\n  (function (Prism) {\n    var comment = {\n      pattern: /^[;#].*/m,\n      greedy: true\n    };\n    var quotesSource = /\"(?:[^\\r\\n\"\\\\]|\\\\(?:[^\\r]|\\r\\n?))*\"(?!\\S)/.source;\n    Prism.languages.systemd = {\n      comment: comment,\n      section: {\n        pattern: /^\\[[^\\n\\r\\[\\]]*\\](?=[ \\t]*$)/m,\n        greedy: true,\n        inside: {\n          punctuation: /^\\[|\\]$/,\n          'section-name': {\n            pattern: /[\\s\\S]+/,\n            alias: 'selector'\n          }\n        }\n      },\n      key: {\n        pattern: /^[^\\s=]+(?=[ \\t]*=)/m,\n        greedy: true,\n        alias: 'attr-name'\n      },\n      value: {\n        // This pattern is quite complex because of two properties:\n        //  1) Quotes (strings) must be preceded by a space. Since we can't use lookbehinds, we have to \"resolve\"\n        //     the lookbehind. You will see this in the main loop where spaces are handled separately.\n        //  2) Line continuations.\n        //     After line continuations, empty lines and comments are ignored so we have to consume them.\n        pattern: RegExp(/(=[ \\t]*(?!\\s))/.source + // the value either starts with quotes or not\n        '(?:' + quotesSource + '|(?=[^\"\\r\\n]))' + // main loop\n        '(?:' + (/[^\\s\\\\]/.source + // handle spaces separately because of quotes\n        '|' + '[ \\t]+(?:(?![ \\t\"])|' + quotesSource + ')' + // line continuation\n        '|' + /\\\\[\\r\\n]+(?:[#;].*[\\r\\n]+)*(?![#;])/.source) + ')*'),\n        lookbehind: true,\n        greedy: true,\n        alias: 'attr-value',\n        inside: {\n          comment: comment,\n          quoted: {\n            pattern: RegExp(/(^|\\s)/.source + quotesSource),\n            lookbehind: true,\n            greedy: true\n          },\n          punctuation: /\\\\$/m,\n          boolean: {\n            pattern: /^(?:false|no|off|on|true|yes)$/,\n            greedy: true\n          }\n        }\n      },\n      operator: /=/\n    };\n  })(Prism);\n}","map":{"version":3,"sources":["D:/Rnd/sleepyowl/node_modules/refractor/lang/systemd.js"],"names":["module","exports","systemd","displayName","aliases","Prism","comment","pattern","greedy","quotesSource","source","languages","section","inside","punctuation","alias","key","value","RegExp","lookbehind","quoted","boolean","operator"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,OAAjB;AACAA,OAAO,CAACC,WAAR,GAAsB,SAAtB;AACAD,OAAO,CAACE,OAAR,GAAkB,EAAlB;;AACA,SAASF,OAAT,CAAiBG,KAAjB,EAAwB;AACtB;AACA;;AAAC,GAAC,UAAUA,KAAV,EAAiB;AACjB,QAAIC,OAAO,GAAG;AACZC,MAAAA,OAAO,EAAE,UADG;AAEZC,MAAAA,MAAM,EAAE;AAFI,KAAd;AAIA,QAAIC,YAAY,GAAG,4CAA4CC,MAA/D;AACAL,IAAAA,KAAK,CAACM,SAAN,CAAgBT,OAAhB,GAA0B;AACxBI,MAAAA,OAAO,EAAEA,OADe;AAExBM,MAAAA,OAAO,EAAE;AACPL,QAAAA,OAAO,EAAE,+BADF;AAEPC,QAAAA,MAAM,EAAE,IAFD;AAGPK,QAAAA,MAAM,EAAE;AACNC,UAAAA,WAAW,EAAE,SADP;AAEN,0BAAgB;AACdP,YAAAA,OAAO,EAAE,SADK;AAEdQ,YAAAA,KAAK,EAAE;AAFO;AAFV;AAHD,OAFe;AAaxBC,MAAAA,GAAG,EAAE;AACHT,QAAAA,OAAO,EAAE,sBADN;AAEHC,QAAAA,MAAM,EAAE,IAFL;AAGHO,QAAAA,KAAK,EAAE;AAHJ,OAbmB;AAkBxBE,MAAAA,KAAK,EAAE;AACL;AACA;AACA;AACA;AACA;AACAV,QAAAA,OAAO,EAAEW,MAAM,CACb,kBAAkBR,MAAlB,GAA2B;AACzB,aADF,GAEED,YAFF,GAGE,gBAHF,GAGqB;AACnB,aAJF,IAKG,UAAUC,MAAV,GAAmB;AAClB,WADD,GAEC,sBAFD,GAGCD,YAHD,GAIC,GAJD,GAIO;AACN,WALD,GAMC,sCAAsCC,MAX1C,IAYE,IAbW,CANV;AAqBLS,QAAAA,UAAU,EAAE,IArBP;AAsBLX,QAAAA,MAAM,EAAE,IAtBH;AAuBLO,QAAAA,KAAK,EAAE,YAvBF;AAwBLF,QAAAA,MAAM,EAAE;AACNP,UAAAA,OAAO,EAAEA,OADH;AAENc,UAAAA,MAAM,EAAE;AACNb,YAAAA,OAAO,EAAEW,MAAM,CAAC,SAASR,MAAT,GAAkBD,YAAnB,CADT;AAENU,YAAAA,UAAU,EAAE,IAFN;AAGNX,YAAAA,MAAM,EAAE;AAHF,WAFF;AAONM,UAAAA,WAAW,EAAE,MAPP;AAQNO,UAAAA,OAAO,EAAE;AACPd,YAAAA,OAAO,EAAE,gCADF;AAEPC,YAAAA,MAAM,EAAE;AAFD;AARH;AAxBH,OAlBiB;AAwDxBc,MAAAA,QAAQ,EAAE;AAxDc,KAA1B;AA0DD,GAhEA,EAgEEjB,KAhEF;AAiEF","sourcesContent":["'use strict'\r\n\r\nmodule.exports = systemd\r\nsystemd.displayName = 'systemd'\r\nsystemd.aliases = []\r\nfunction systemd(Prism) {\r\n  // https://www.freedesktop.org/software/systemd/man/systemd.syntax.html\r\n  ;(function (Prism) {\r\n    var comment = {\r\n      pattern: /^[;#].*/m,\r\n      greedy: true\r\n    }\r\n    var quotesSource = /\"(?:[^\\r\\n\"\\\\]|\\\\(?:[^\\r]|\\r\\n?))*\"(?!\\S)/.source\r\n    Prism.languages.systemd = {\r\n      comment: comment,\r\n      section: {\r\n        pattern: /^\\[[^\\n\\r\\[\\]]*\\](?=[ \\t]*$)/m,\r\n        greedy: true,\r\n        inside: {\r\n          punctuation: /^\\[|\\]$/,\r\n          'section-name': {\r\n            pattern: /[\\s\\S]+/,\r\n            alias: 'selector'\r\n          }\r\n        }\r\n      },\r\n      key: {\r\n        pattern: /^[^\\s=]+(?=[ \\t]*=)/m,\r\n        greedy: true,\r\n        alias: 'attr-name'\r\n      },\r\n      value: {\r\n        // This pattern is quite complex because of two properties:\r\n        //  1) Quotes (strings) must be preceded by a space. Since we can't use lookbehinds, we have to \"resolve\"\r\n        //     the lookbehind. You will see this in the main loop where spaces are handled separately.\r\n        //  2) Line continuations.\r\n        //     After line continuations, empty lines and comments are ignored so we have to consume them.\r\n        pattern: RegExp(\r\n          /(=[ \\t]*(?!\\s))/.source + // the value either starts with quotes or not\r\n            '(?:' +\r\n            quotesSource +\r\n            '|(?=[^\"\\r\\n]))' + // main loop\r\n            '(?:' +\r\n            (/[^\\s\\\\]/.source + // handle spaces separately because of quotes\r\n              '|' +\r\n              '[ \\t]+(?:(?![ \\t\"])|' +\r\n              quotesSource +\r\n              ')' + // line continuation\r\n              '|' +\r\n              /\\\\[\\r\\n]+(?:[#;].*[\\r\\n]+)*(?![#;])/.source) +\r\n            ')*'\r\n        ),\r\n        lookbehind: true,\r\n        greedy: true,\r\n        alias: 'attr-value',\r\n        inside: {\r\n          comment: comment,\r\n          quoted: {\r\n            pattern: RegExp(/(^|\\s)/.source + quotesSource),\r\n            lookbehind: true,\r\n            greedy: true\r\n          },\r\n          punctuation: /\\\\$/m,\r\n          boolean: {\r\n            pattern: /^(?:false|no|off|on|true|yes)$/,\r\n            greedy: true\r\n          }\r\n        }\r\n      },\r\n      operator: /=/\r\n    }\r\n  })(Prism)\r\n}\r\n"]},"metadata":{},"sourceType":"script"}