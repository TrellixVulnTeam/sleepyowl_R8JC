{"ast":null,"code":"'use strict';\n\nvar refractorScheme = require('./scheme.js');\n\nmodule.exports = racket;\nracket.displayName = 'racket';\nracket.aliases = ['rkt'];\n\nfunction racket(Prism) {\n  Prism.register(refractorScheme);\n  Prism.languages.racket = Prism.languages.extend('scheme', {\n    'lambda-parameter': {\n      // the racket lambda syntax is a lot more complex, so we won't even attempt to capture it.\n      // this will just prevent false positives of the `function` pattern\n      pattern: /([(\\[]lambda\\s+[(\\[])[^()\\[\\]'\\s]+/,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('racket', 'string', {\n    lang: {\n      pattern: /^#lang.+/m,\n      greedy: true,\n      alias: 'keyword'\n    }\n  });\n  Prism.languages.rkt = Prism.languages.racket;\n}","map":{"version":3,"sources":["D:/Rnd/sleepyowl/node_modules/refractor/lang/racket.js"],"names":["refractorScheme","require","module","exports","racket","displayName","aliases","Prism","register","languages","extend","pattern","lookbehind","insertBefore","lang","greedy","alias","rkt"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAGC,OAAO,CAAC,aAAD,CAA7B;;AACAC,MAAM,CAACC,OAAP,GAAiBC,MAAjB;AACAA,MAAM,CAACC,WAAP,GAAqB,QAArB;AACAD,MAAM,CAACE,OAAP,GAAiB,CAAC,KAAD,CAAjB;;AACA,SAASF,MAAT,CAAgBG,KAAhB,EAAuB;AACrBA,EAAAA,KAAK,CAACC,QAAN,CAAeR,eAAf;AACAO,EAAAA,KAAK,CAACE,SAAN,CAAgBL,MAAhB,GAAyBG,KAAK,CAACE,SAAN,CAAgBC,MAAhB,CAAuB,QAAvB,EAAiC;AACxD,wBAAoB;AAClB;AACA;AACAC,MAAAA,OAAO,EAAE,oCAHS;AAIlBC,MAAAA,UAAU,EAAE;AAJM;AADoC,GAAjC,CAAzB;AAQAL,EAAAA,KAAK,CAACE,SAAN,CAAgBI,YAAhB,CAA6B,QAA7B,EAAuC,QAAvC,EAAiD;AAC/CC,IAAAA,IAAI,EAAE;AACJH,MAAAA,OAAO,EAAE,WADL;AAEJI,MAAAA,MAAM,EAAE,IAFJ;AAGJC,MAAAA,KAAK,EAAE;AAHH;AADyC,GAAjD;AAOAT,EAAAA,KAAK,CAACE,SAAN,CAAgBQ,GAAhB,GAAsBV,KAAK,CAACE,SAAN,CAAgBL,MAAtC;AACD","sourcesContent":["'use strict'\r\nvar refractorScheme = require('./scheme.js')\r\nmodule.exports = racket\r\nracket.displayName = 'racket'\r\nracket.aliases = ['rkt']\r\nfunction racket(Prism) {\r\n  Prism.register(refractorScheme)\r\n  Prism.languages.racket = Prism.languages.extend('scheme', {\r\n    'lambda-parameter': {\r\n      // the racket lambda syntax is a lot more complex, so we won't even attempt to capture it.\r\n      // this will just prevent false positives of the `function` pattern\r\n      pattern: /([(\\[]lambda\\s+[(\\[])[^()\\[\\]'\\s]+/,\r\n      lookbehind: true\r\n    }\r\n  })\r\n  Prism.languages.insertBefore('racket', 'string', {\r\n    lang: {\r\n      pattern: /^#lang.+/m,\r\n      greedy: true,\r\n      alias: 'keyword'\r\n    }\r\n  })\r\n  Prism.languages.rkt = Prism.languages.racket\r\n}\r\n"]},"metadata":{},"sourceType":"script"}