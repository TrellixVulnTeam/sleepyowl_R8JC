{"ast":null,"code":"'use strict';\n\nmodule.exports = tcl;\ntcl.displayName = 'tcl';\ntcl.aliases = [];\n\nfunction tcl(Prism) {\n  Prism.languages.tcl = {\n    comment: {\n      pattern: /(^|[^\\\\])#.*/,\n      lookbehind: true\n    },\n    string: {\n      pattern: /\"(?:[^\"\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"/,\n      greedy: true\n    },\n    variable: [{\n      pattern: /(\\$)(?:::)?(?:[a-zA-Z0-9]+::)*\\w+/,\n      lookbehind: true\n    }, {\n      pattern: /(\\$)\\{[^}]+\\}/,\n      lookbehind: true\n    }, {\n      pattern: /(^[\\t ]*set[ \\t]+)(?:::)?(?:[a-zA-Z0-9]+::)*\\w+/m,\n      lookbehind: true\n    }],\n    function: {\n      pattern: /(^[\\t ]*proc[ \\t]+)\\S+/m,\n      lookbehind: true\n    },\n    builtin: [{\n      pattern: /(^[\\t ]*)(?:proc|return|class|error|eval|exit|for|foreach|if|switch|while|break|continue)\\b/m,\n      lookbehind: true\n    }, /\\b(?:elseif|else)\\b/],\n    scope: {\n      pattern: /(^[\\t ]*)(?:global|upvar|variable)\\b/m,\n      lookbehind: true,\n      alias: 'constant'\n    },\n    keyword: {\n      pattern: /(^[\\t ]*|\\[)(?:after|append|apply|array|auto_(?:execok|import|load|mkindex|qualify|reset)|automkindex_old|bgerror|binary|catch|cd|chan|clock|close|concat|dde|dict|encoding|eof|exec|expr|fblocked|fconfigure|fcopy|file(?:event|name)?|flush|gets|glob|history|http|incr|info|interp|join|lappend|lassign|lindex|linsert|list|llength|load|lrange|lrepeat|lreplace|lreverse|lsearch|lset|lsort|math(?:func|op)|memory|msgcat|namespace|open|package|parray|pid|pkg_mkIndex|platform|puts|pwd|re_syntax|read|refchan|regexp|registry|regsub|rename|Safe_Base|scan|seek|set|socket|source|split|string|subst|Tcl|tcl(?:_endOfWord|_findLibrary|startOf(?:Next|Previous)Word|wordBreak(?:After|Before)|test|vars)|tell|time|tm|trace|unknown|unload|unset|update|uplevel|vwait)\\b/m,\n      lookbehind: true\n    },\n    operator: /!=?|\\*\\*?|==|&&?|\\|\\|?|<[=<]?|>[=>]?|[-+~\\/%?^]|\\b(?:eq|ne|in|ni)\\b/,\n    punctuation: /[{}()\\[\\]]/\n  };\n}","map":{"version":3,"sources":["D:/Rnd/sleepyowl/node_modules/refractor/lang/tcl.js"],"names":["module","exports","tcl","displayName","aliases","Prism","languages","comment","pattern","lookbehind","string","greedy","variable","function","builtin","scope","alias","keyword","operator","punctuation"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,GAAjB;AACAA,GAAG,CAACC,WAAJ,GAAkB,KAAlB;AACAD,GAAG,CAACE,OAAJ,GAAc,EAAd;;AACA,SAASF,GAAT,CAAaG,KAAb,EAAoB;AAClBA,EAAAA,KAAK,CAACC,SAAN,CAAgBJ,GAAhB,GAAsB;AACpBK,IAAAA,OAAO,EAAE;AACPC,MAAAA,OAAO,EAAE,cADF;AAEPC,MAAAA,UAAU,EAAE;AAFL,KADW;AAKpBC,IAAAA,MAAM,EAAE;AACNF,MAAAA,OAAO,EAAE,qCADH;AAENG,MAAAA,MAAM,EAAE;AAFF,KALY;AASpBC,IAAAA,QAAQ,EAAE,CACR;AACEJ,MAAAA,OAAO,EAAE,mCADX;AAEEC,MAAAA,UAAU,EAAE;AAFd,KADQ,EAKR;AACED,MAAAA,OAAO,EAAE,eADX;AAEEC,MAAAA,UAAU,EAAE;AAFd,KALQ,EASR;AACED,MAAAA,OAAO,EAAE,kDADX;AAEEC,MAAAA,UAAU,EAAE;AAFd,KATQ,CATU;AAuBpBI,IAAAA,QAAQ,EAAE;AACRL,MAAAA,OAAO,EAAE,yBADD;AAERC,MAAAA,UAAU,EAAE;AAFJ,KAvBU;AA2BpBK,IAAAA,OAAO,EAAE,CACP;AACEN,MAAAA,OAAO,EACL,8FAFJ;AAGEC,MAAAA,UAAU,EAAE;AAHd,KADO,EAMP,qBANO,CA3BW;AAmCpBM,IAAAA,KAAK,EAAE;AACLP,MAAAA,OAAO,EAAE,uCADJ;AAELC,MAAAA,UAAU,EAAE,IAFP;AAGLO,MAAAA,KAAK,EAAE;AAHF,KAnCa;AAwCpBC,IAAAA,OAAO,EAAE;AACPT,MAAAA,OAAO,EACL,kvBAFK;AAGPC,MAAAA,UAAU,EAAE;AAHL,KAxCW;AA6CpBS,IAAAA,QAAQ,EACN,qEA9CkB;AA+CpBC,IAAAA,WAAW,EAAE;AA/CO,GAAtB;AAiDD","sourcesContent":["'use strict'\r\n\r\nmodule.exports = tcl\r\ntcl.displayName = 'tcl'\r\ntcl.aliases = []\r\nfunction tcl(Prism) {\r\n  Prism.languages.tcl = {\r\n    comment: {\r\n      pattern: /(^|[^\\\\])#.*/,\r\n      lookbehind: true\r\n    },\r\n    string: {\r\n      pattern: /\"(?:[^\"\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"/,\r\n      greedy: true\r\n    },\r\n    variable: [\r\n      {\r\n        pattern: /(\\$)(?:::)?(?:[a-zA-Z0-9]+::)*\\w+/,\r\n        lookbehind: true\r\n      },\r\n      {\r\n        pattern: /(\\$)\\{[^}]+\\}/,\r\n        lookbehind: true\r\n      },\r\n      {\r\n        pattern: /(^[\\t ]*set[ \\t]+)(?:::)?(?:[a-zA-Z0-9]+::)*\\w+/m,\r\n        lookbehind: true\r\n      }\r\n    ],\r\n    function: {\r\n      pattern: /(^[\\t ]*proc[ \\t]+)\\S+/m,\r\n      lookbehind: true\r\n    },\r\n    builtin: [\r\n      {\r\n        pattern:\r\n          /(^[\\t ]*)(?:proc|return|class|error|eval|exit|for|foreach|if|switch|while|break|continue)\\b/m,\r\n        lookbehind: true\r\n      },\r\n      /\\b(?:elseif|else)\\b/\r\n    ],\r\n    scope: {\r\n      pattern: /(^[\\t ]*)(?:global|upvar|variable)\\b/m,\r\n      lookbehind: true,\r\n      alias: 'constant'\r\n    },\r\n    keyword: {\r\n      pattern:\r\n        /(^[\\t ]*|\\[)(?:after|append|apply|array|auto_(?:execok|import|load|mkindex|qualify|reset)|automkindex_old|bgerror|binary|catch|cd|chan|clock|close|concat|dde|dict|encoding|eof|exec|expr|fblocked|fconfigure|fcopy|file(?:event|name)?|flush|gets|glob|history|http|incr|info|interp|join|lappend|lassign|lindex|linsert|list|llength|load|lrange|lrepeat|lreplace|lreverse|lsearch|lset|lsort|math(?:func|op)|memory|msgcat|namespace|open|package|parray|pid|pkg_mkIndex|platform|puts|pwd|re_syntax|read|refchan|regexp|registry|regsub|rename|Safe_Base|scan|seek|set|socket|source|split|string|subst|Tcl|tcl(?:_endOfWord|_findLibrary|startOf(?:Next|Previous)Word|wordBreak(?:After|Before)|test|vars)|tell|time|tm|trace|unknown|unload|unset|update|uplevel|vwait)\\b/m,\r\n      lookbehind: true\r\n    },\r\n    operator:\r\n      /!=?|\\*\\*?|==|&&?|\\|\\|?|<[=<]?|>[=>]?|[-+~\\/%?^]|\\b(?:eq|ne|in|ni)\\b/,\r\n    punctuation: /[{}()\\[\\]]/\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}