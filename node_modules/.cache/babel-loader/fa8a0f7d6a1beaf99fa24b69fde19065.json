{"ast":null,"code":"'use strict';\n\nmodule.exports = swift;\nswift.displayName = 'swift';\nswift.aliases = [];\n\nfunction swift(Prism) {\n  Prism.languages.swift = {\n    comment: {\n      // Nested comments are supported up to 2 levels\n      pattern: /(^|[^\\\\:])(?:\\/\\/.*|\\/\\*(?:[^/*]|\\/(?!\\*)|\\*(?!\\/)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*\\*\\/)/,\n      lookbehind: true,\n      greedy: true\n    },\n    'string-literal': [// https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html\n    {\n      pattern: RegExp(/(^|[^\"#])/.source + '(?:' + // single-line string\n      /\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^(])|[^\\\\\\r\\n\"])*\"/.source + '|' + // multi-line string\n      /\"\"\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|[^(])|[^\\\\\"]|\"(?!\"\"))*\"\"\"/.source + ')' + /(?![\"#])/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /(\\\\\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\n          lookbehind: true,\n          inside: null // see below\n\n        },\n        'interpolation-punctuation': {\n          pattern: /^\\)|\\\\\\($/,\n          alias: 'punctuation'\n        },\n        punctuation: /\\\\(?=[\\r\\n])/,\n        string: /[\\s\\S]+/\n      }\n    }, {\n      pattern: RegExp(/(^|[^\"#])(#+)/.source + '(?:' + // single-line string\n      /\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^#])|[^\\\\\\r\\n])*?\"/.source + '|' + // multi-line string\n      /\"\"\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|[^#])|[^\\\\])*?\"\"\"/.source + ')' + '\\\\2'),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /(\\\\#+\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\n          lookbehind: true,\n          inside: null // see below\n\n        },\n        'interpolation-punctuation': {\n          pattern: /^\\)|\\\\#+\\($/,\n          alias: 'punctuation'\n        },\n        string: /[\\s\\S]+/\n      }\n    }],\n    directive: {\n      // directives with conditions\n      pattern: RegExp(/#/.source + '(?:' + (/(?:elseif|if)\\b/.source + '(?:[ \\t]*' + // This regex is a little complex. It's equivalent to this:\n      //   (?:![ \\t]*)?(?:\\b\\w+\\b(?:[ \\t]*<round>)?|<round>)(?:[ \\t]*(?:&&|\\|\\|))?\n      // where <round> is a general parentheses expression.\n      /(?:![ \\t]*)?(?:\\b\\w+\\b(?:[ \\t]*\\((?:[^()]|\\([^()]*\\))*\\))?|\\((?:[^()]|\\([^()]*\\))*\\))(?:[ \\t]*(?:&&|\\|\\|))?/.source + ')+') + '|' + /(?:else|endif)\\b/.source + ')'),\n      alias: 'property',\n      inside: {\n        'directive-name': /^#\\w+/,\n        boolean: /\\b(?:true|false)\\b/,\n        number: /\\b\\d+(?:\\.\\d+)*\\b/,\n        operator: /!|&&|\\|\\||[<>]=?/,\n        punctuation: /[(),]/\n      }\n    },\n    literal: {\n      pattern: /#(?:colorLiteral|column|dsohandle|file(?:ID|Literal|Path)?|function|imageLiteral|line)\\b/,\n      alias: 'constant'\n    },\n    'other-directive': {\n      pattern: /#\\w+\\b/,\n      alias: 'property'\n    },\n    attribute: {\n      pattern: /@\\w+/,\n      alias: 'atrule'\n    },\n    'function-definition': {\n      pattern: /(\\bfunc\\s+)\\w+/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    label: {\n      // https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID141\n      pattern: /\\b(break|continue)\\s+\\w+|\\b[a-zA-Z_]\\w*(?=\\s*:\\s*(?:for|repeat|while)\\b)/,\n      lookbehind: true,\n      alias: 'important'\n    },\n    keyword: /\\b(?:Any|Protocol|Self|Type|actor|as|assignment|associatedtype|associativity|async|await|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|higherThan|if|import|in|indirect|infix|init|inout|internal|is|lazy|left|let|lowerThan|mutating|none|nonisolated|nonmutating|open|operator|optional|override|postfix|precedencegroup|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|set|some|static|struct|subscript|super|switch|throw|throws|try|typealias|unowned|unsafe|var|weak|where|while|willSet)\\b/,\n    boolean: /\\b(?:true|false)\\b/,\n    nil: {\n      pattern: /\\bnil\\b/,\n      alias: 'constant'\n    },\n    'short-argument': /\\$\\d+\\b/,\n    omit: {\n      pattern: /\\b_\\b/,\n      alias: 'keyword'\n    },\n    number: /\\b(?:[\\d_]+(?:\\.[\\de_]+)?|0x[a-f0-9_]+(?:\\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b/i,\n    // A class name must start with an upper-case letter and be either 1 letter long or contain a lower-case letter.\n    'class-name': /\\b[A-Z](?:[A-Z_\\d]*[a-z]\\w*)?\\b/,\n    function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    constant: /\\b(?:[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\\b/,\n    // Operators are generic in Swift. Developers can even create new operators (e.g. +++).\n    // https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html#ID481\n    // This regex only supports ASCII operators.\n    operator: /[-+*/%=!<>&|^~?]+|\\.[.\\-+*/%=!<>&|^~?]+/,\n    punctuation: /[{}[\\]();,.:\\\\]/\n  };\n  Prism.languages.swift['string-literal'].forEach(function (rule) {\n    rule.inside['interpolation'].inside = Prism.languages.swift;\n  });\n}","map":{"version":3,"sources":["D:/Rnd/sleepyowl/node_modules/refractor/lang/swift.js"],"names":["module","exports","swift","displayName","aliases","Prism","languages","comment","pattern","lookbehind","greedy","RegExp","source","inside","interpolation","alias","punctuation","string","directive","boolean","number","operator","literal","attribute","label","keyword","nil","omit","function","constant","forEach","rule"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nmodule.exports = swift\r\nswift.displayName = 'swift'\r\nswift.aliases = []\r\nfunction swift(Prism) {\r\n  Prism.languages.swift = {\r\n    comment: {\r\n      // Nested comments are supported up to 2 levels\r\n      pattern:\r\n        /(^|[^\\\\:])(?:\\/\\/.*|\\/\\*(?:[^/*]|\\/(?!\\*)|\\*(?!\\/)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*\\*\\/)/,\r\n      lookbehind: true,\r\n      greedy: true\r\n    },\r\n    'string-literal': [\r\n      // https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html\r\n      {\r\n        pattern: RegExp(\r\n          /(^|[^\"#])/.source +\r\n            '(?:' + // single-line string\r\n            /\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^(])|[^\\\\\\r\\n\"])*\"/\r\n              .source +\r\n            '|' + // multi-line string\r\n            /\"\"\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|[^(])|[^\\\\\"]|\"(?!\"\"))*\"\"\"/\r\n              .source +\r\n            ')' +\r\n            /(?![\"#])/.source\r\n        ),\r\n        lookbehind: true,\r\n        greedy: true,\r\n        inside: {\r\n          interpolation: {\r\n            pattern: /(\\\\\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\r\n            lookbehind: true,\r\n            inside: null // see below\r\n          },\r\n          'interpolation-punctuation': {\r\n            pattern: /^\\)|\\\\\\($/,\r\n            alias: 'punctuation'\r\n          },\r\n          punctuation: /\\\\(?=[\\r\\n])/,\r\n          string: /[\\s\\S]+/\r\n        }\r\n      },\r\n      {\r\n        pattern: RegExp(\r\n          /(^|[^\"#])(#+)/.source +\r\n            '(?:' + // single-line string\r\n            /\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^#])|[^\\\\\\r\\n])*?\"/\r\n              .source +\r\n            '|' + // multi-line string\r\n            /\"\"\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|[^#])|[^\\\\])*?\"\"\"/.source +\r\n            ')' +\r\n            '\\\\2'\r\n        ),\r\n        lookbehind: true,\r\n        greedy: true,\r\n        inside: {\r\n          interpolation: {\r\n            pattern: /(\\\\#+\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\r\n            lookbehind: true,\r\n            inside: null // see below\r\n          },\r\n          'interpolation-punctuation': {\r\n            pattern: /^\\)|\\\\#+\\($/,\r\n            alias: 'punctuation'\r\n          },\r\n          string: /[\\s\\S]+/\r\n        }\r\n      }\r\n    ],\r\n    directive: {\r\n      // directives with conditions\r\n      pattern: RegExp(\r\n        /#/.source +\r\n          '(?:' +\r\n          (/(?:elseif|if)\\b/.source +\r\n            '(?:[ \\t]*' + // This regex is a little complex. It's equivalent to this:\r\n            //   (?:![ \\t]*)?(?:\\b\\w+\\b(?:[ \\t]*<round>)?|<round>)(?:[ \\t]*(?:&&|\\|\\|))?\r\n            // where <round> is a general parentheses expression.\r\n            /(?:![ \\t]*)?(?:\\b\\w+\\b(?:[ \\t]*\\((?:[^()]|\\([^()]*\\))*\\))?|\\((?:[^()]|\\([^()]*\\))*\\))(?:[ \\t]*(?:&&|\\|\\|))?/\r\n              .source +\r\n            ')+') +\r\n          '|' +\r\n          /(?:else|endif)\\b/.source +\r\n          ')'\r\n      ),\r\n      alias: 'property',\r\n      inside: {\r\n        'directive-name': /^#\\w+/,\r\n        boolean: /\\b(?:true|false)\\b/,\r\n        number: /\\b\\d+(?:\\.\\d+)*\\b/,\r\n        operator: /!|&&|\\|\\||[<>]=?/,\r\n        punctuation: /[(),]/\r\n      }\r\n    },\r\n    literal: {\r\n      pattern:\r\n        /#(?:colorLiteral|column|dsohandle|file(?:ID|Literal|Path)?|function|imageLiteral|line)\\b/,\r\n      alias: 'constant'\r\n    },\r\n    'other-directive': {\r\n      pattern: /#\\w+\\b/,\r\n      alias: 'property'\r\n    },\r\n    attribute: {\r\n      pattern: /@\\w+/,\r\n      alias: 'atrule'\r\n    },\r\n    'function-definition': {\r\n      pattern: /(\\bfunc\\s+)\\w+/,\r\n      lookbehind: true,\r\n      alias: 'function'\r\n    },\r\n    label: {\r\n      // https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID141\r\n      pattern:\r\n        /\\b(break|continue)\\s+\\w+|\\b[a-zA-Z_]\\w*(?=\\s*:\\s*(?:for|repeat|while)\\b)/,\r\n      lookbehind: true,\r\n      alias: 'important'\r\n    },\r\n    keyword:\r\n      /\\b(?:Any|Protocol|Self|Type|actor|as|assignment|associatedtype|associativity|async|await|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|higherThan|if|import|in|indirect|infix|init|inout|internal|is|lazy|left|let|lowerThan|mutating|none|nonisolated|nonmutating|open|operator|optional|override|postfix|precedencegroup|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|set|some|static|struct|subscript|super|switch|throw|throws|try|typealias|unowned|unsafe|var|weak|where|while|willSet)\\b/,\r\n    boolean: /\\b(?:true|false)\\b/,\r\n    nil: {\r\n      pattern: /\\bnil\\b/,\r\n      alias: 'constant'\r\n    },\r\n    'short-argument': /\\$\\d+\\b/,\r\n    omit: {\r\n      pattern: /\\b_\\b/,\r\n      alias: 'keyword'\r\n    },\r\n    number:\r\n      /\\b(?:[\\d_]+(?:\\.[\\de_]+)?|0x[a-f0-9_]+(?:\\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b/i,\r\n    // A class name must start with an upper-case letter and be either 1 letter long or contain a lower-case letter.\r\n    'class-name': /\\b[A-Z](?:[A-Z_\\d]*[a-z]\\w*)?\\b/,\r\n    function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\r\n    constant: /\\b(?:[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\\b/,\r\n    // Operators are generic in Swift. Developers can even create new operators (e.g. +++).\r\n    // https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html#ID481\r\n    // This regex only supports ASCII operators.\r\n    operator: /[-+*/%=!<>&|^~?]+|\\.[.\\-+*/%=!<>&|^~?]+/,\r\n    punctuation: /[{}[\\]();,.:\\\\]/\r\n  }\r\n  Prism.languages.swift['string-literal'].forEach(function (rule) {\r\n    rule.inside['interpolation'].inside = Prism.languages.swift\r\n  })\r\n}\r\n"]},"metadata":{},"sourceType":"script"}