{"ast":null,"code":"'use strict';\n\nmodule.exports = rust;\nrust.displayName = 'rust';\nrust.aliases = [];\n\nfunction rust(Prism) {\n  ;\n\n  (function (Prism) {\n    var multilineComment = /\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|<self>)*\\*\\//.source;\n\n    for (var i = 0; i < 2; i++) {\n      // support 4 levels of nested comments\n      multilineComment = multilineComment.replace(/<self>/g, function () {\n        return multilineComment;\n      });\n    }\n\n    multilineComment = multilineComment.replace(/<self>/g, function () {\n      return /[^\\s\\S]/.source;\n    });\n    Prism.languages.rust = {\n      comment: [{\n        pattern: RegExp(/(^|[^\\\\])/.source + multilineComment),\n        lookbehind: true,\n        greedy: true\n      }, {\n        pattern: /(^|[^\\\\:])\\/\\/.*/,\n        lookbehind: true,\n        greedy: true\n      }],\n      string: {\n        pattern: /b?\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|b?r(#*)\"(?:[^\"]|\"(?!\\1))*\"\\1/,\n        greedy: true\n      },\n      char: {\n        pattern: /b?'(?:\\\\(?:x[0-7][\\da-fA-F]|u\\{(?:[\\da-fA-F]_*){1,6}\\}|.)|[^\\\\\\r\\n\\t'])'/,\n        greedy: true,\n        alias: 'string'\n      },\n      attribute: {\n        pattern: /#!?\\[(?:[^\\[\\]\"]|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")*\\]/,\n        greedy: true,\n        alias: 'attr-name',\n        inside: {\n          string: null // see below\n\n        }\n      },\n      // Closure params should not be confused with bitwise OR |\n      'closure-params': {\n        pattern: /([=(,:]\\s*|\\bmove\\s*)\\|[^|]*\\||\\|[^|]*\\|(?=\\s*(?:\\{|->))/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          'closure-punctuation': {\n            pattern: /^\\||\\|$/,\n            alias: 'punctuation'\n          },\n          rest: null // see below\n\n        }\n      },\n      'lifetime-annotation': {\n        pattern: /'\\w+/,\n        alias: 'symbol'\n      },\n      'fragment-specifier': {\n        pattern: /(\\$\\w+:)[a-z]+/,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      variable: /\\$\\w+/,\n      'function-definition': {\n        pattern: /(\\bfn\\s+)\\w+/,\n        lookbehind: true,\n        alias: 'function'\n      },\n      'type-definition': {\n        pattern: /(\\b(?:enum|struct|union)\\s+)\\w+/,\n        lookbehind: true,\n        alias: 'class-name'\n      },\n      'module-declaration': [{\n        pattern: /(\\b(?:crate|mod)\\s+)[a-z][a-z_\\d]*/,\n        lookbehind: true,\n        alias: 'namespace'\n      }, {\n        pattern: /(\\b(?:crate|self|super)\\s*)::\\s*[a-z][a-z_\\d]*\\b(?:\\s*::(?:\\s*[a-z][a-z_\\d]*\\s*::)*)?/,\n        lookbehind: true,\n        alias: 'namespace',\n        inside: {\n          punctuation: /::/\n        }\n      }],\n      keyword: [// https://github.com/rust-lang/reference/blob/master/src/keywords.md\n      /\\b(?:abstract|as|async|await|become|box|break|const|continue|crate|do|dyn|else|enum|extern|final|fn|for|if|impl|in|let|loop|macro|match|mod|move|mut|override|priv|pub|ref|return|self|Self|static|struct|super|trait|try|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/, // primitives and str\n      // https://doc.rust-lang.org/stable/rust-by-example/primitives.html\n      /\\b(?:[ui](?:8|16|32|64|128|size)|f(?:32|64)|bool|char|str)\\b/],\n      // functions can technically start with an upper-case letter, but this will introduce a lot of false positives\n      // and Rust's naming conventions recommend snake_case anyway.\n      // https://doc.rust-lang.org/1.0.0/style/style/naming/README.html\n      function: /\\b[a-z_]\\w*(?=\\s*(?:::\\s*<|\\())/,\n      macro: {\n        pattern: /\\b\\w+!/,\n        alias: 'property'\n      },\n      constant: /\\b[A-Z_][A-Z_\\d]+\\b/,\n      'class-name': /\\b[A-Z]\\w*\\b/,\n      namespace: {\n        pattern: /(?:\\b[a-z][a-z_\\d]*\\s*::\\s*)*\\b[a-z][a-z_\\d]*\\s*::(?!\\s*<)/,\n        inside: {\n          punctuation: /::/\n        }\n      },\n      // Hex, oct, bin, dec numbers with visual separators and type suffix\n      number: /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)(?:_?(?:[iu](?:8|16|32|64|size)?|f32|f64))?\\b/,\n      boolean: /\\b(?:false|true)\\b/,\n      punctuation: /->|\\.\\.=|\\.{1,3}|::|[{}[\\];(),:]/,\n      operator: /[-+*\\/%!^]=?|=[=>]?|&[&=]?|\\|[|=]?|<<?=?|>>?=?|[@?]/\n    };\n    Prism.languages.rust['closure-params'].inside.rest = Prism.languages.rust;\n    Prism.languages.rust['attribute'].inside['string'] = Prism.languages.rust['string'];\n  })(Prism);\n}","map":{"version":3,"sources":["D:/Rnd/sleepyowl/node_modules/refractor/lang/rust.js"],"names":["module","exports","rust","displayName","aliases","Prism","multilineComment","source","i","replace","languages","comment","pattern","RegExp","lookbehind","greedy","string","char","alias","attribute","inside","rest","variable","punctuation","keyword","function","macro","constant","namespace","number","boolean","operator"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nmodule.exports = rust\r\nrust.displayName = 'rust'\r\nrust.aliases = []\r\nfunction rust(Prism) {\r\n  ;(function (Prism) {\r\n    var multilineComment = /\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|<self>)*\\*\\//.source\r\n    for (var i = 0; i < 2; i++) {\r\n      // support 4 levels of nested comments\r\n      multilineComment = multilineComment.replace(/<self>/g, function () {\r\n        return multilineComment\r\n      })\r\n    }\r\n    multilineComment = multilineComment.replace(/<self>/g, function () {\r\n      return /[^\\s\\S]/.source\r\n    })\r\n    Prism.languages.rust = {\r\n      comment: [\r\n        {\r\n          pattern: RegExp(/(^|[^\\\\])/.source + multilineComment),\r\n          lookbehind: true,\r\n          greedy: true\r\n        },\r\n        {\r\n          pattern: /(^|[^\\\\:])\\/\\/.*/,\r\n          lookbehind: true,\r\n          greedy: true\r\n        }\r\n      ],\r\n      string: {\r\n        pattern: /b?\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|b?r(#*)\"(?:[^\"]|\"(?!\\1))*\"\\1/,\r\n        greedy: true\r\n      },\r\n      char: {\r\n        pattern:\r\n          /b?'(?:\\\\(?:x[0-7][\\da-fA-F]|u\\{(?:[\\da-fA-F]_*){1,6}\\}|.)|[^\\\\\\r\\n\\t'])'/,\r\n        greedy: true,\r\n        alias: 'string'\r\n      },\r\n      attribute: {\r\n        pattern: /#!?\\[(?:[^\\[\\]\"]|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")*\\]/,\r\n        greedy: true,\r\n        alias: 'attr-name',\r\n        inside: {\r\n          string: null // see below\r\n        }\r\n      },\r\n      // Closure params should not be confused with bitwise OR |\r\n      'closure-params': {\r\n        pattern: /([=(,:]\\s*|\\bmove\\s*)\\|[^|]*\\||\\|[^|]*\\|(?=\\s*(?:\\{|->))/,\r\n        lookbehind: true,\r\n        greedy: true,\r\n        inside: {\r\n          'closure-punctuation': {\r\n            pattern: /^\\||\\|$/,\r\n            alias: 'punctuation'\r\n          },\r\n          rest: null // see below\r\n        }\r\n      },\r\n      'lifetime-annotation': {\r\n        pattern: /'\\w+/,\r\n        alias: 'symbol'\r\n      },\r\n      'fragment-specifier': {\r\n        pattern: /(\\$\\w+:)[a-z]+/,\r\n        lookbehind: true,\r\n        alias: 'punctuation'\r\n      },\r\n      variable: /\\$\\w+/,\r\n      'function-definition': {\r\n        pattern: /(\\bfn\\s+)\\w+/,\r\n        lookbehind: true,\r\n        alias: 'function'\r\n      },\r\n      'type-definition': {\r\n        pattern: /(\\b(?:enum|struct|union)\\s+)\\w+/,\r\n        lookbehind: true,\r\n        alias: 'class-name'\r\n      },\r\n      'module-declaration': [\r\n        {\r\n          pattern: /(\\b(?:crate|mod)\\s+)[a-z][a-z_\\d]*/,\r\n          lookbehind: true,\r\n          alias: 'namespace'\r\n        },\r\n        {\r\n          pattern:\r\n            /(\\b(?:crate|self|super)\\s*)::\\s*[a-z][a-z_\\d]*\\b(?:\\s*::(?:\\s*[a-z][a-z_\\d]*\\s*::)*)?/,\r\n          lookbehind: true,\r\n          alias: 'namespace',\r\n          inside: {\r\n            punctuation: /::/\r\n          }\r\n        }\r\n      ],\r\n      keyword: [\r\n        // https://github.com/rust-lang/reference/blob/master/src/keywords.md\r\n        /\\b(?:abstract|as|async|await|become|box|break|const|continue|crate|do|dyn|else|enum|extern|final|fn|for|if|impl|in|let|loop|macro|match|mod|move|mut|override|priv|pub|ref|return|self|Self|static|struct|super|trait|try|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/, // primitives and str\r\n        // https://doc.rust-lang.org/stable/rust-by-example/primitives.html\r\n        /\\b(?:[ui](?:8|16|32|64|128|size)|f(?:32|64)|bool|char|str)\\b/\r\n      ],\r\n      // functions can technically start with an upper-case letter, but this will introduce a lot of false positives\r\n      // and Rust's naming conventions recommend snake_case anyway.\r\n      // https://doc.rust-lang.org/1.0.0/style/style/naming/README.html\r\n      function: /\\b[a-z_]\\w*(?=\\s*(?:::\\s*<|\\())/,\r\n      macro: {\r\n        pattern: /\\b\\w+!/,\r\n        alias: 'property'\r\n      },\r\n      constant: /\\b[A-Z_][A-Z_\\d]+\\b/,\r\n      'class-name': /\\b[A-Z]\\w*\\b/,\r\n      namespace: {\r\n        pattern: /(?:\\b[a-z][a-z_\\d]*\\s*::\\s*)*\\b[a-z][a-z_\\d]*\\s*::(?!\\s*<)/,\r\n        inside: {\r\n          punctuation: /::/\r\n        }\r\n      },\r\n      // Hex, oct, bin, dec numbers with visual separators and type suffix\r\n      number:\r\n        /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)(?:_?(?:[iu](?:8|16|32|64|size)?|f32|f64))?\\b/,\r\n      boolean: /\\b(?:false|true)\\b/,\r\n      punctuation: /->|\\.\\.=|\\.{1,3}|::|[{}[\\];(),:]/,\r\n      operator: /[-+*\\/%!^]=?|=[=>]?|&[&=]?|\\|[|=]?|<<?=?|>>?=?|[@?]/\r\n    }\r\n    Prism.languages.rust['closure-params'].inside.rest = Prism.languages.rust\r\n    Prism.languages.rust['attribute'].inside['string'] =\r\n      Prism.languages.rust['string']\r\n  })(Prism)\r\n}\r\n"]},"metadata":{},"sourceType":"script"}